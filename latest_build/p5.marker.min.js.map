{"mappings":"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","sources":["src/utils/caseConvert.js","src/utils/attrParse.js","src/utils/p5Modifiers.js","src/methods/3d_methods.js","src/properties/color_props.js","src/methods/color_methods.js","src/properties/environment_props.js","src/core.js","src/properties/canvas_props.js","src/methods/canvas_methods.js","src/elements/canvas_elements.js","src/modules/collide.js","src/properties/shape_props.js","src/elements/2d_shape_elements.js","src/modules/environment.js","src/elements/color_elements.js","src/elements/beyond_canvas_elements.js","src/modules/shape.js","src/modules/structure.js","src/modules/dom.js","src/modules/data.js","src/modules/math.js","src/modules/rendering.js","src/modules/transform.js","src/modules/events.js","src/modules/image.js","src/modules/io.js","src/modules/typography.js","src/properties/3d_props.js","src/elements/3d_shape_elements.js","src/elements/3d_light_elements.js","src/index.js"],"sourcesContent":["//  regex\nconst upperCaseChar = /([A-Z])/g;\nconst upperCaseCharAfterFirst = /(?<!^)[A-Z]/g;\n\n//  js string replace 2nd param\nconst prependMatch = (char) => char + \"$&\";\n\n//  casing converters\nexport const camelToKebab = (camelStr) =>\n  camelStr.replace(upperCaseCharAfterFirst, prependMatch(\"-\")).toLowerCase();\n\nexport const camelToSnake = (camelStr) =>\n  camelStr.replace(upperCaseCharAfterFirst, prependMatch(\"_\")).toLowerCase();\n\nexport const kebabToCamel = (kebabStr) =>\n  kebabStr.replace(/-./g, (s) => s[1].toUpperCase());\n\nexport const pascalToCamel = (pascalStr) =>\n  pascalStr.slice(0, 1).toLowerCase() + pascalStr.slice(1);\n\nexport const pascalToKebab = (pascalStr) =>\n  pascalToCamel(pascalStr).replaceAll(\n    upperCaseChar,\n    (c) => \"-\" + c.toLowerCase()\n  );\n\nexport const pascalToSnake = (pascalStr) =>\n  pascalToCamel(pascalStr).replaceAll(\n    upperCaseChar,\n    (c) => \"_\" + c.toLowerCase()\n  );\n\nexport const snakeToCamel = (snakeStr) =>\n  snakeStr\n    .split(\"_\")\n    .map((s, i) => (i > 0 ? s.slice(0, 1).toUpperCase() + s.slice(1) : s))\n    .join(\"\");\n","const notExistingObjProp = \"(?<![^\\\\.]\\\\.)\";\r\nconst legalVarName = \"\\\\b[a-z$_][a-z0-9$_]*\\\\b\";\r\nconst notNewObjProp = \"(?:(?!\\\\s*:)|(?<=\\\\?[^,]*))\";\r\nconst notBoolean = \"(?<!\\\\btrue\\\\b)(?<!\\\\bfalse\\\\b)\";\r\nconst notNewKeyword = \"(?<!\\\\bnew\\\\b)\";\r\nconst notProceededByOpenString = \"(?=(?:[^\\\"'`](?:([\\\"'`]).*\\\\1)*)*$)\";\r\nconst varName = new RegExp(\r\n  notExistingObjProp +\r\n    legalVarName +\r\n    notNewObjProp +\r\n    notBoolean +\r\n    notNewKeyword +\r\n    notProceededByOpenString,\r\n  \"gi\"\r\n);\r\n\r\nexport class AttrParseUtil {\r\n  static regex = {\r\n    legalVarName,\r\n    notExistingObjProp,\r\n    notNewObjProp,\r\n    notBoolean,\r\n    notNewKeyword,\r\n    notProceededByOpenString,\r\n    varName,\r\n  };\r\n  static allQuotesMatched(str) {\r\n    const quoteExps = [/\"/g, /'/g, /`/g];\r\n    for (const i in quoteExps) {\r\n      const matches = str.match(quoteExps[i]);\r\n      if (matches && matches.length % 2 !== 0) return false;\r\n    }\r\n    return true;\r\n  }\r\n  static enclose = (str) => {\r\n    const strMinusStrings = str.replace(/([\"'`]).*?\\1/gi, \"\");\r\n    const items = strMinusStrings.split(/(?<!{[^}]*),/gi);\r\n    const isObject = strMinusStrings.match(/^[^\\?\\{]*:/gi);\r\n    if (items.length === 1 && !isObject) return str;\r\n    const isUnenclosed = str.match(/(?<!\\([^\\)]*)(?<!{[^}]*)[,:]/gi) !== null;\r\n    if (!isUnenclosed) return str;\r\n    if (isObject) return `{${str}}`;\r\n    return `[${str}]`;\r\n  };\r\n  static escapes = {\r\n    LESS_THAN: \"<\",\r\n    GREATER_THAN: \">\",\r\n    AT_LEAST: \">=\",\r\n    NO_MORE_THAN: \"<=\",\r\n    AND: \"&&\",\r\n    OR: \"||\",\r\n    WHILE: \"\",\r\n  };\r\n  static isP5 = (name) => p5.prototype.hasOwnProperty(name);\r\n  static keywords = [\r\n    \"break\",\r\n    \"case\",\r\n    \"catch\",\r\n    \"class\",\r\n    \"const\",\r\n    \"continue\",\r\n    \"debugger\",\r\n    \"default\",\r\n    \"delete\",\r\n    \"do\",\r\n    \"else\",\r\n    \"export\",\r\n    \"extends\",\r\n    \"false\",\r\n    \"finally\",\r\n    \"for\",\r\n    \"function\",\r\n    \"if\",\r\n    \"import\",\r\n    \"in\",\r\n    \"instanceof\",\r\n    \"new\",\r\n    \"null\",\r\n    \"return\",\r\n    \"static\",\r\n    \"super\",\r\n    \"switch\",\r\n    \"this\",\r\n    \"throw\",\r\n    \"true\",\r\n    \"try\",\r\n    \"typeof\",\r\n    \"var\",\r\n    \"void\",\r\n    \"while\",\r\n    \"with\",\r\n    \"yield\",\r\n  ];\r\n  static getOwnerName(el, prop) {\r\n    if (\r\n      AttrParseUtil.keywords.includes(prop) ||\r\n      prop in AttrParseUtil.escapes ||\r\n      prop in globalThis\r\n    )\r\n      return \"none\";\r\n    if (prop in el) return \"this\";\r\n    //  TODO - remove this temporary check when no longer needed\r\n    if (prop in el.pInst && prop !== \"width\" && prop !== \"height\")\r\n      return \"pInst\";\r\n    return \"inherited\";\r\n  }\r\n  static getPrefix(el, prop) {\r\n    const ownerName = AttrParseUtil.getOwnerName(el, prop);\r\n    if (ownerName === \"none\") return \"\";\r\n    if (ownerName.slice(0, 4) === \"this\") return `${ownerName}.`;\r\n    else return `_${ownerName}.`;\r\n  }\r\n  static replacePropName(el, prop) {\r\n    if (prop in AttrParseUtil.escapes) return AttrParseUtil.escapes[prop];\r\n    return AttrParseUtil.getPrefix(el, prop) + prop;\r\n  }\r\n  static replacePropNames(el, str) {\r\n    return str\r\n      .replace(/UNTIL(.*)/, \"!($1)\")\r\n      .replace(AttrParseUtil.regex.varName, (prop) =>\r\n        AttrParseUtil.replacePropName(el, prop)\r\n      );\r\n  }\r\n}\r\n","import { camelToSnake } from \"./caseConvert\";\r\n\r\nexport function defineProperties(obj) {\r\n  for (const p in obj) {\r\n    p5.prototype[p] = {};\r\n  }\r\n  Object.defineProperties(p5.prototype, obj);\r\n}\r\n\r\nexport const wrapMethod = (methodName, wrapper) =>\r\n  (p5.prototype[methodName] = wrapper(p5.prototype[methodName]));\r\n\r\nexport const defineSnakeAlias = (...propNames) =>\r\n  propNames.forEach(\r\n    (propName) =>\r\n      (p5.prototype[camelToSnake(propName)] = p5.prototype[propName])\r\n  );\r\n\r\nexport const defineRendererGetterSetters = (...methodNames) =>\r\n  methodNames.forEach((methodName) =>\r\n    defineProperties({\r\n      [camelToSnake(methodName)]: {\r\n        get: function () {\r\n          return this._renderer?.[`_${methodName}`];\r\n        },\r\n        set: function (val) {\r\n          if (Array.isArray(val)) this[methodName](...val);\r\n          else this[methodName](val);\r\n        },\r\n      },\r\n    })\r\n  );\r\n","export const addWebGLMethods = (baseClass) =>\r\n  class extends baseClass {\r\n    /**\r\n     * Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it\r\n     * as the current (active) camera.\r\n     *\r\n     * The new camera is initialized with a default position\r\n     * (see camera property)\r\n     * and a default perspective projection\r\n     * (see <a href=\"#/p5.Camera/perspective\">perspective()</a>).\r\n     * Its properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a>\r\n     * methods.\r\n     *\r\n     * Note: Every 3D sketch starts with a default camera initialized.\r\n     * This camera can be controlled with the canvas properties\r\n     * camera,\r\n     * perspective, ortho,\r\n     * and frustum if it is the only camera\r\n     * in the scene.\r\n     * @method create_camera\r\n     * @return {p5.Camera} The newly created camera object.\r\n     */\r\n    create_camera() {\r\n      this.pInst.createCamera();\r\n    }\r\n    /**\r\n     * Creates a new <a href=\"#/p5.Shader\">p5.Shader</a> object\r\n     * from the provided vertex and fragment shader code.\r\n     *\r\n     * Note, shaders can only be used in WEBGL mode.\r\n     * @method create_shader\r\n     * @param {String} vertSrc source code for the vertex shader\r\n     * @param {String} fragSrc source code for the fragment shader\r\n     * @returns {p5.Shader} a shader object created from the provided\r\n     */\r\n    create_shader() {\r\n      this.pInst.createShader(...arguments);\r\n    }\r\n  };\r\n","export const addColorConstants = (baseClass) =>\n  class extends baseClass {\n    get NONE() {\n      return \"#0000\";\n    }\n  };\n\nexport const addStroke = (baseClass) =>\n  class extends baseClass {\n    #stroke;\n    #stroke_weight;\n    /**\n     * Sets the color used to draw lines and borders around shapes. This color\n     * is either a <a href=\"#/p5.Color\">p5.Color</a> object or a comma\n     * separated list of values to pass into\n     * <a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.\n     * @type {p5.Color}\n     */\n    get stroke() {\n      return this.#stroke;\n    }\n    set stroke(val) {\n      const { pInst } = this;\n      if (val === this.NONE) pInst.noStroke();\n      else pInst.stroke(val);\n      this.#stroke = pInst.color(\n        pInst._renderer.isP3D\n          ? pInst._renderer.curStrokeColor\n          : pInst.drawingContext.strokeStyle\n      );\n    }\n    /**\n     * Sets the width of the stroke used for lines, points and the border around\n     * shapes. All widths are set in units of pixels.\n     *\n     * Note that it is affected by any transformation or scaling that has\n     * been applied previously.\n     * @type {number}\n     */\n    get stroke_weight() {\n      return this.#stroke_weight;\n    }\n    set stroke_weight(val) {\n      this.pInst.strokeWeight(val);\n      this.#stroke_weight = this.pInst._renderer.isP3D\n        ? this.pInst._renderer.curStrokeWeight\n        : this.pInst.drawingContext.lineWidth;\n    }\n  };\n\nexport const addFillStroke = (baseClass) =>\n  class extends addStroke(baseClass) {\n    #fill;\n    /**\n     * Sets the color used to fill shapes. This may be a\n     * <a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object or\n     * a comma separated list of values to pass into\n     * <a href=\"https://p5js.org/reference/#/p5/color\">color()</a>.\n     * @type {p5.Color}\n     */\n    get fill() {\n      return this.#fill;\n    }\n    set fill(val) {\n      const { pInst } = this;\n      if (val === this.NONE) pInst.noFill();\n      else pInst.fill(val);\n      this.#fill = pInst.color(\n        pInst._renderer.isP3D\n          ? pInst._renderer.curFillColor\n          : pInst.drawingContext.fillStyle\n      );\n    }\n  };\n","export const addColorMethods = (baseClass) =>\n  class extends baseClass {\n    lerp_color() {\n      return this.pInst.lerpColor(...arguments);\n    }\n  };\n","export const addEnvironmentProps = (baseClass) =>\r\n  class extends baseClass {\r\n    /**\r\n     * The delta_time property contains the time\r\n     * difference between the beginning of the previous frame and the beginning\r\n     * of the current frame in milliseconds.\r\n     *\r\n     * This variable is useful for creating time sensitive animation or physics\r\n     * calculation that should stay constant regardless of frame rate.\r\n     * (read-only)\r\n     * @readonly\r\n     * @type {number}\r\n     */\r\n    get delta_time() {\r\n      return this.pInst.deltaTime;\r\n    }\r\n    /**\r\n     * screen stores information about the screen displaying the canvas.\r\n     * To get the dimensions of the screen, use:\r\n     * ```\r\n     * screen.width\r\n     * screen.height\r\n     * ```\r\n     * screen is available in any browser and is not specific to this\r\n     * library.\r\n     * The full documentation is here:\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Screen\r\n     * (read-only)\r\n     * @readonly\r\n     */\r\n    get screen() {\r\n      return screen;\r\n    }\r\n  };\r\n","import { pascalToKebab, kebabToCamel } from \"./utils/caseConvert\";\nimport { AttrParseUtil } from \"./utils/attrParse\";\nimport { wrapMethod, defineProperties } from \"./utils/p5Modifiers\";\nimport { addWebGLMethods } from \"./methods/3d_methods\";\nimport { addColorConstants } from \"./properties/color_props\";\nimport { addColorMethods } from \"./methods/color_methods\";\nimport { addEnvironmentProps } from \"./properties/environment_props\";\n\nwrapMethod(\n  \"_createFriendlyGlobalFunctionBinder\",\n  (base) =>\n    function (options = {}) {\n      return (prop, value) => {\n        const descriptor = Object.getOwnPropertyDescriptor(p5.prototype, prop);\n        const globalObject = options.globalObject || window;\n        if (typeof descriptor === \"undefined\" || descriptor.writable)\n          return base.call(this, options)(prop, value);\n        return Object.defineProperty(globalObject, prop, descriptor);\n      };\n    }\n);\n\np5.prototype.assignCanvas = function (c, r) {\n  this.noCanvas();\n  const mainDiv = document.querySelector(\"main\");\n  let index = 0;\n  if (typeof c.id === \"undefined\") {\n    while (document.querySelector(`p5MarkerCanvas${index}`)) index++;\n  }\n  c.id = `p5MarkerCanvas${index}`;\n  if (mainDiv.children.length === 0) mainDiv.remove();\n  if (r === this.WEBGL) {\n    this._setProperty(\"_renderer\", new p5.RendererGL(c, this, true));\n  } else {\n    //P2D mode\n    this._setProperty(\"_renderer\", new p5.Renderer2D(c, this, true));\n  }\n  this._renderer._applyDefaults();\n  this._setProperty(\"_elements\", [this._renderer]);\n};\n\np5.prototype.assets = {};\n\np5.prototype.loadAssets = async function () {\n  const assetElements = Array.from(document.querySelectorAll(\"p-asset\"));\n  const pInst = this;\n  const promises = assetElements.map((el) => el.load(pInst));\n  const results = await Promise.all(promises);\n  results.forEach(\n    (result, i) => (this.assets[assetElements[i].getAttribute(\"name\")] = result)\n  );\n  this._decrementPreload();\n};\np5.prototype.registerPreloadMethod(\"loadAssets\", p5.prototype);\np5.prototype._debug_attributes = true;\np5.prototype.create_canvas_element = function (elementName) {\n  const createdElement = document.createElement(elementName);\n  this.canvas.appendChild(createdElement);\n  createdElement.setup(this, this.canvas);\n  return createdElement;\n};\ndefineProperties({\n  object_assign: {\n    set: function ([target, ...sources]) {\n      Object.assign(target, ...sources);\n    },\n  },\n  debug_attributes: {\n    get: function () {\n      return this._debug_attributes;\n    },\n    set: function (val) {\n      const valType = typeof val;\n      if (typeof val === \"boolean\") this._debug_attributes = val;\n      else\n        console.error(\n          `debug_attributes was set to a value of type ${valType} but may only be set to a boolean true/false value.`\n        );\n    },\n  },\n});\n\nconst attributePriorities = [\n  \"debug_attributes\",\n  \"anchor\",\n  \"angle\",\n  \"scale_factor\",\n  \"shear\",\n  \"_default\",\n  \"repeat\",\n  \"change\",\n];\nexport const addP5PropsAndMethods = (baseClass) =>\n  class P5Extension extends addEnvironmentProps(\n    addColorMethods(addColorConstants(addWebGLMethods(baseClass)))\n  ) {\n    /**\n     * This element's parent canvas.\n     * @private\n     */\n    #canvas;\n    #frame_created;\n    /**\n     * @private\n     */\n    #pInst;\n    /**\n     * @private\n     */\n    #proxy = new Proxy(this, {\n      get(target, prop) {\n        if (prop in target) return target[prop];\n        return target.#state[prop];\n      },\n      has(target, prop) {\n        if (prop in target) return true;\n        return prop in target.#state;\n      },\n      set(target, prop, val) {\n        target.set(prop, val);\n      },\n    });\n    /**\n     * @private\n     */\n    #state = {};\n\n    /**\n     * @private\n     */\n    #updateFunctions = new Map();\n\n    constructor() {\n      super();\n    }\n    /**\n     * Proxy for the sibling element above this element with access to its\n     * properties, methods, and attributes.\n     * @type {proxy}\n     */\n    get above_sibling() {\n      return this.previousElementSibling.this_element;\n    }\n    /**\n     * True if siblings directly above this element with an \"on\" attribute have\n     * \"on\" set to false. This can be used to switch between elements based on\n     * conditions, similar to if/else.\n     * @type {boolean}\n     */\n    get above_siblings_off() {\n      if (this === this.parentElement.firstElementChild) return true;\n      const { above_sibling } = this;\n      if (above_sibling.on) return false;\n      return above_sibling.above_siblings_off;\n    }\n    /**\n     * @method applyChange\n     * @private\n     */\n    #applyChange() {\n      const change = (this.#state.change = this.#updateAttribute(\n        this.#state,\n        \"change\",\n        this\n      ));\n      let changed = false;\n      const assignProp = (obj, prop) => {\n        if (prop in obj) {\n          const changeVal = change[prop];\n          changed ||= obj[prop] !== changeVal;\n          obj[prop] = changeVal;\n          if (this.pInst.debug_attributes) this.setAttribute(prop, changeVal);\n          return true;\n        }\n        return false;\n      };\n      for (const prop in change) {\n        assignProp(this, prop) ||\n          assignProp(this.#state, prop) ||\n          assignProp(this.pInst, prop) ||\n          console.error(\n            `${this.constructor.elementName}'s change attribute has a prop called ${prop} that is unknown`\n          );\n\n        this.#state[prop] = change[prop];\n      }\n      return changed;\n    }\n    /**\n     * Checks if the provided attribute name belongs to a parent element. If\n     * the attribute refers to an object property, this will check for an\n     * attribute with a name that matches the object.\n     * @param {string} attributeName - name of the attribute to check\n     * @returns {boolean} true\n     */\n    attributeInherited(attributeName) {\n      const [obj, ...props] = attributeName.split(\".\");\n      if (props.length) return this.attributeInherited(obj);\n      if (this.parentElement.hasAttribute(attributeName)) return true;\n      if (this.parentElement.attributeInherited)\n        return this.parentElement.attributeInherited(attributeName);\n      return false;\n    }\n    /**\n     * Blends the pixels in the display window according to the defined mode.\n     * There is a choice of the following modes to blend the source pixels (A)\n     * with the ones of pixels already in the display window (B):\n     * <ul>\n     * <li><code>BLEND</code> - linear interpolation of colours: C =\n     * A*factor + B. <b>This is the default blending mode.</b></li>\n     * <li><code>ADD</code> - sum of A and B</li>\n     * <li><code>DARKEST</code> - only the darkest colour succeeds: C =\n     * min(A*factor, B).</li>\n     * <li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\n     * max(A*factor, B).</li>\n     * <li><code>DIFFERENCE</code> - subtract colors from underlying image.\n     * <em>(2D)</em></li>\n     * <li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\n     * extreme.</li>\n     * <li><code>MULTIPLY</code> - multiply the colors, result will always be\n     * darker.</li>\n     * <li><code>SCREEN</code> - opposite multiply, uses inverse values of the\n     * colors.</li>\n     * <li><code>REPLACE</code> - the pixels entirely replace the others and\n     * don't utilize alpha (transparency) values.</li>\n     * <li><code>REMOVE</code> - removes pixels from B with the alpha strength of A.</li>\n     * <li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n     * </code>. Multiplies dark values, and screens light values. <em>(2D)</em></li>\n     * <li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\n     * gray, <code>MULTIPLY</code> when lower. <em>(2D)</em></li>\n     * <li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n     * <code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh. <em>(2D)</em>\n     * </li>\n     * <li><code>DODGE</code> - lightens light tones and increases contrast,\n     * ignores darks. <em>(2D)</em></li>\n     * <li><code>BURN</code> - darker areas are applied, increasing contrast,\n     * ignores lights. <em>(2D)</em></li>\n     * <li><code>SUBTRACT</code> - remainder of A and B <em>(3D)</em></li>\n     * </ul>\n     *\n     * <em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer.<br>\n     * <em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer.\n     * @type {BLEND|DARKEST|LIGHTEST|DIFFERENCE|MULTIPLY|EXCLUSION|SCREEN|\n     * REPLACE|OVERLAY|HARD_LIGHT|SOFT_LIGHT|DODGE|BURN|ADD|REMOVE|SUBTRACT}\n     */\n    get blend_mode() {\n      if (this.pInst._renderer.isP3D) return this.curBlendMode;\n      return this.pInst.drawingContext.globalCompositeOperation;\n    }\n    set blend_mode(val) {\n      this.pInst.blendMode(val);\n    }\n\n    /**\n     * @private\n     */\n    #callAttributeUpdater(inherited, attrName, thisArg) {\n      if (this.#updateFunctions.has(attrName)) {\n        const evalFn = this.#updateFunctions.get(attrName);\n        return evalFn.call(thisArg, this.pInst, inherited);\n      }\n      if (attrName in inherited) return inherited[attrName];\n      if (attrName in this.pInst) return this.pInst[attrName];\n      return;\n    }\n    /**\n     * The parent canvas for this element\n     * @type {HTMLCanvasElement}\n     */\n    get canvas() {\n      return this.#canvas.this_element;\n    }\n    /**\n     * Checks if this element is colliding with the provided other element.\n     * @method colliding_with\n     * @param {P5Element} el - other element to check\n     * @returns {boolean} true if elements are colliding\n     */\n    colliding_with(el) {\n      return this.pInst.collide_elements(this, el);\n    }\n    /**\n     * color_mode changes the way p5.js interprets\n     * color data. By default, fill,\n     * <a href=\"https://p5js.org/reference/#/p5/color\">color()</a> are defined\n     * by values between 0 and 255 using the RGB color model. This is equivalent\n     * to setting color_mode=\"RGB, 255\".\n     * Setting color_mode=\"HSB\" lets you use the HSB system instead. By default,\n     * this is color_mode=\"HSB, 360, 100, 100, 1\". You can also use HSL.\n     *\n     * Note: existing color objects remember the mode that they were created in,\n     * so you can change modes as you like without affecting their appearance.\n     *\n     * @type {RGB|HSB|HSL}\n     */\n    get color_mode() {\n      return this.pInst._colorMode;\n    }\n    set color_mode(val) {\n      this.pInst.colorMode(val);\n    }\n    /**\n     * @private\n     */\n    get #comments() {\n      return this.#html\n        .split(/(?:\\r\\n|\\r|\\n)/)\n        .map((line) => line.match(/.{1,80}/g))\n        .flat()\n        .map((line) => \"//\\t\" + line);\n    }\n    set console_log(val) {\n      console.log(...arguments);\n    }\n    /**\n     * Updates the element's attribute values, renders it to the canvas, and\n     * calls the draw method on its children.\n     * @method draw\n     * @param {object} inherited - object containing attribute values passed\n     * down from parent element\n     */\n    draw(inherited) {\n      if (this.hasAttribute(\"on\")) {\n        this.#state.on = this.#updateAttribute(\n          inherited,\n          \"on\",\n          this.this_element\n        );\n        if (!this.#state.on) return;\n      }\n      this.pInst.push();\n      this.updateState(inherited);\n      const { WHILE } = p5.prototype;\n      let repeat = true;\n      while (repeat) {\n        this.render?.();\n        for (const child of this.children) {\n          child.draw(this.#state);\n        }\n        repeat = this.hasAttribute(\"repeat\") && this.#state.repeat;\n        const { change } = this.#state;\n        if (Array.isArray(repeat)) {\n          const [key, ...conditions] = this.#updateAttribute(\n            this.#state,\n            \"repeat\"\n          );\n          repeat = (key === WHILE) === conditions.every((c) => c);\n        }\n        if (repeat) {\n          this.pInst.pop();\n          this.pInst.push();\n          const changed = this.#applyChange();\n          const updaters = this.#updateFunctions.entries();\n          for (const [attrName, updater] of updaters) {\n            if (attrName in change === false)\n              this.#state[attrName] = this.#updateAttribute(\n                inherited,\n                attrName,\n                this\n              );\n          }\n          if (!changed) repeat = false;\n        }\n        this.endRender?.(this.#state);\n      }\n      this.pInst.pop();\n    }\n    /**\n     * The p5.js API provides a lot of functionality for creating graphics, but\n     * there is some native HTML5 Canvas functionality that is not exposed by\n     * p5.\n     *\n     * You can still assign to\n     * it directly using the property `drawing_context`. This is\n     * the equivalent of calling `canvas.getContext('2d');` or\n     * `canvas.getContext('webgl');` and then calling Object.assign on the\n     * result.\n     * See this\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">\n     * reference for the native canvas API</a> for possible drawing functions\n     * you can call.\n     *\n     * ```xml\n     * <_ drawing_context=\"shadowOffsetX: 5, shadowOffsetY: -5, shadowBlur: 10,\n     * shadowColor: 'black'\" />\n     * ```\n     * @type {Object}\n     */\n    get drawing_context() {\n      return this.pInst.drawingContext;\n    }\n    set drawing_context(obj) {\n      Object.assign(this.pInst.drawingContext, obj);\n    }\n    /**\n     * Name of the HTML element generated from this class.\n     * @type {string}\n     */\n    static get elementName() {\n      return `p-${pascalToKebab(this.name)}`;\n    }\n    /**\n     * With erase=\"true\", this element and all elements rendered after it will\n     * subtract from the canvas. Erased areas will reveal the web page\n     * underneath the canvas. This may be canceled with erase=\"false\"\n     *\n     * Arguments for the optional parameters to\n     * <a href=\"https://p5js.org/reference/#/p5/erase\">erase()</a>\n     * may also be provided as a comma separated list.\n     *\n     * ```<p-image>``` elements will not erase the canvas but works as usual.\n     * @type {boolean}\n     */\n    get erase() {\n      return this.pInst._renderer._isErasing;\n    }\n    set erase(val) {\n      if (val === true) this.pInst.erase();\n      else if (val === false) this.pInst.noErase();\n      else if (Array.isArray(val)) this.pInst.erase(...val);\n      else\n        console.error(\n          `${\n            this.tagName\n          }'s erase property was set using type ${typeof val}, but erase may only be set to a boolean or array.`\n        );\n    }\n    /**\n     * first_frame is true if the element was just created.\n     * This can be used for setup. For example,\n     * ```xml\n     * <_ rand_ball=\"this_element\">\n     *  <_ on=\"first_frame\"\n     *     rand_ball.x=\"random(canvas.width)\"\n     *     rand_ball.y=\"random(canvas.height)\"></_>\n     *   <circle></circle>\n     * </_>\n     * ```\n     * Sets the ```<_>```'s x-coordinate to a random position along the\n     * canvas when it is first created. The value then stays the same.\n     * As a result, the circle is played at that random position.\n     * (read-only)\n     * @type {boolean}\n     */\n    get first_frame() {\n      return this.frame_count === 1;\n    }\n    /**\n     * frame_count counts the number of frames this element has been\n     * rendered. The first time this element is rendered, frame_count\n     * with be 1. (read-only)\n     * @type {number}\n     */\n    get frame_count() {\n      return this.pInst.frameCount - this.#frame_created;\n    }\n    /**\n     * @private\n     */\n    get #html() {\n      return this.outerHTML.replace(this.innerHTML, \"\");\n    }\n    /**\n     * List of attribute names in the order in which they will be evaluated.\n     * Element attributes are not guaranteed to be in the order in which they\n     * are written. Transformation attributes are prioritized before others\n     * and use this order: anchor, angle, scale_factor, shear.\n     * @type {Array}\n     */\n    get orderedAttributeNames() {\n      const ordered = Array.from(this.attributes)\n        .sort(\n          ({ name: a }, { name: b }) =>\n            (attributePriorities.indexOf(a) + 1 ||\n              attributePriorities.indexOf(\"_default\")) -\n            (attributePriorities.indexOf(b) + 1 ||\n              attributePriorities.indexOf(\"_default\"))\n        )\n        .map(({ name }) => name);\n      this.transformDoneIndex =\n        ordered.findLastIndex((attrName) =>\n          attributePriorities.includes(attrName)\n        ) + 1;\n      return ordered;\n    }\n    /**\n     * Proxy for this element's parent element with access to its properties,\n     * methods, and attributes.\n     * @type {proxy}\n     */\n    get parent_element() {\n      return this.parentElement.this_element;\n    }\n    /**\n     * This element's p5 instance.\n     * @type {object}\n     */\n    get pInst() {\n      return this.#pInst;\n    }\n    /**\n     * Sets an attribute's value on this element.\n     * @param {string} attributeName\n     * @param {*} value\n     */\n    set(attributeName, value) {\n      if (attributeName in this) {\n        this.#updateFunctions.set(\n          attributeName,\n          () => (this[attributeName] = value)\n        );\n        this[attributeName] = value;\n      } else if (attributeName in this.pInst) {\n        this.#updateFunctions.set(\n          attributeName,\n          () => (this.pInst[attributeName] = value)\n        );\n      } else {\n        this.#updateFunctions.set(attributeName, () => value);\n      }\n      this.#state[attributeName] = value;\n    }\n    /**\n     * Sets this element up with a p5 instance and sets up its children.\n     * @param {p5} pInst\n     */\n    setup(pInst, canvas) {\n      this.#pInst = pInst;\n      this.#frame_created = pInst.frameCount;\n      this.#canvas = canvas;\n      this.setDefaults?.();\n      this.#setupEvalFns?.();\n      this.setupRenderFunction?.();\n      for (const child of this.children) {\n        child.setup(pInst, canvas);\n      }\n    }\n    /**\n     * @private\n     */\n    #setupEvalFn(attr) {\n      //  The attribute's value will be modified, then run as JS\n      const attrJsStr = attr.value;\n      //  TODO - catch improperly ordered quote marks: \"foo'var\"'\n      if (AttrParseUtil.allQuotesMatched(attrJsStr) === false)\n        console.error(\n          `It looks like a ${this.constructor.elementName}'s ${attr.name} ` +\n            `attribute has an open string. Check that each string has a beginning and end character.`\n        );\n      const getOwnerName = (prop) => {\n        if (prop in this) return \"this\";\n        //  TODO - remove condition when p5 props have been moved to elments\n        if (\n          prop in this.pInst &&\n          typeof this.pInst[prop] !== \"function\" &&\n          prop !== \"width\" &&\n          prop !== \"height\"\n        )\n          return \"this.pInst\";\n        if (this.attributeInherited(prop)) return \"inherited\";\n      };\n      const owner = getOwnerName(attr.name);\n      //  This is plural because there may be a prop name within\n      //  Ex:  myArray[i]\n      const varName = AttrParseUtil.replacePropNames(this, attr.name);\n      const attrValueVarsReplaced = AttrParseUtil.replacePropNames(\n        this,\n        attrJsStr\n      );\n      const varValue = AttrParseUtil.enclose(attrValueVarsReplaced);\n      const evalFnName = `${this.constructor.name}_${attr.name.replace(\n        /[^a-z0-9]/g,\n        \"_\"\n      )}`;\n      const fnHeader = `return function ${evalFnName}(_pInst, _inherited) {`;\n      //  TODO Fix this mess\n      const fnBody =\n        owner === \"inherited\" && !attr.name.includes(\".\")\n          ? `return ${varValue};\\n}`\n          : `return ${varName} = ${varValue};\\n};`;\n      const fnStr = [fnHeader, ...this.#comments, fnBody].join(\"\\n\");\n      const evalFn = new Function(fnStr)();\n      this.#updateFunctions.set(attr.name, evalFn);\n    }\n    /**\n     * @private\n     */\n    #setupEvalFns() {\n      if (this.hasAttribute(\"repeat\") && !this.hasAttribute(\"change\")) {\n        console.error(\n          `It looks like a ${this.constructor.elementName} has a repeat attribute ` +\n            \"but does not have a change attribute. The change attribute is required to \" +\n            \"prevent infinite loops.\"\n        );\n        this.removeAttribute(\"repeat\");\n      }\n      const { orderedAttributeNames, transformDoneIndex } = this;\n      for (let i = 0; i < orderedAttributeNames.length; i++) {\n        if (i === transformDoneIndex)\n          this.#updateFunctions.set(\"transform_matrix\", function () {\n            this.transform_matrix = this.pInst.transform_matrix;\n          });\n        this.#setupEvalFn(this.attributes[orderedAttributeNames[i]]);\n      }\n    }\n    /**\n     * This element's proxy with access to properties, methods, and attributes.\n     */\n    get this_element() {\n      return this.#proxy;\n    }\n    /**\n     * @private\n     * @param {*} inherited\n     * @param {*} attrName\n     * @param {*} thisArg\n     * @returns\n     */\n    #updateAttribute(inherited, attrName, thisArg) {\n      if (attrName === \"repeat\" || attrName === \"change\")\n        inherited = this.#state;\n      const val = this.#callAttributeUpdater(inherited, attrName, thisArg);\n      //  Setting canvas width or height resets the drawing context\n      //  Only set the attribute if it's not one of those\n      if (this.pInst.debug_attributes === false) return val;\n      if (\n        this instanceof HTMLCanvasElement &&\n        (attrName === \"width\" || attrName === \"height\")\n      )\n        return val;\n\n      //  Brackets will throw a 'not a valid attribute name' error\n      if (attrName.match(/[\\[\\]]/)) return val;\n\n      const valToString = (v) => {\n        if (v instanceof p5.Color) return v.toString(this.pInst.color_mode);\n        if (typeof v?.toString === \"undefined\") return v;\n        return v.toString();\n      };\n      this.setAttribute(attrName, valToString(val));\n      return val;\n    }\n    /**\n     * Updates the values of all attributes using the provided expressions.\n     * @param {Object} inherited - object\n     * @returns\n     */\n    updateState(inherited) {\n      for (const prop in inherited) {\n        if (prop in this) this[prop] = inherited[prop];\n        this.#state[prop] = inherited[prop];\n      }\n      const updaters = this.#updateFunctions.entries();\n      for (const [attrName, updateFunction] of updaters) {\n        this.#state[attrName] = this.#updateAttribute(\n          inherited,\n          attrName,\n          this\n        );\n      }\n      return this.#state;\n    }\n    /**\n     * Set attributes for the WebGL Drawing context.\n     * This is a way of adjusting how the WebGL\n     * renderer works to fine-tune the display and performance.\n     *\n     * Note that this will reinitialize the drawing context\n     * if set after the WebGL canvas is made.\n     *\n     * If webgl_attributes is set to an object, all attributes\n     * not declared in the object will be set to defaults.\n     *\n     * The available attributes are:\n     * <br>\n     * alpha - indicates if the canvas contains an alpha buffer\n     * default is false\n     *\n     * depth - indicates whether the drawing buffer has a depth buffer\n     * of at least 16 bits - default is true\n     *\n     * stencil - indicates whether the drawing buffer has a stencil buffer\n     * of at least 8 bits\n     *\n     * antialias - indicates whether or not to perform anti-aliasing\n     * default is false (true in Safari)\n     *\n     * premultipliedAlpha - indicates that the page compositor will assume\n     * the drawing buffer contains colors with pre-multiplied alpha\n     * default is false\n     *\n     * preserveDrawingBuffer - if true the buffers will not be cleared and\n     * and will preserve their values until cleared or overwritten by author\n     * (note that p5 clears automatically on draw loop)\n     * default is true\n     *\n     * perPixelLighting - if true, per-pixel lighting will be used in the\n     * lighting shader otherwise per-vertex lighting is used.\n     * default is true.\n     *\n     * @type {Object}\n     */\n    get webgl_attributes() {\n      return this.pInst._glAttributes;\n    }\n    set webgl_attributes(val) {\n      this.pInst.setAttributes(...arguments);\n    }\n  };\nexport class P5Element extends addP5PropsAndMethods(HTMLElement) {}\n\nexport class RenderedElement extends P5Element {\n  constructor(overloads, renderFunctionName) {\n    super();\n    /**\n     * @private\n     */\n    this.overloads = overloads;\n    /**\n     * @private\n     */\n    this.renderFunctionName =\n      renderFunctionName || kebabToCamel(this.tagName.toLowerCase().slice(2));\n  }\n  /**\n   * Sets the parameters used to call this element's render function based\n   * on the overloads for that function and this element's attributes.\n   * @private\n   */\n  #getArgumentsFromOverloads() {\n    const { overloads } = this;\n    //  Check every required parameter has an attribute\n    const isOptional = (param) => param.match(/^\\[.*\\]$/);\n    let overloadMatch = false;\n    //  Split the parameters and start with overloads with most parameters\n    const overloadsSplitSorted = overloads\n      .map((o) => o.split(\",\").map((p) => p.trim()))\n      .sort((a, b) => a.length - b.length);\n    //  If there aren't any overloads, return an empty array\n    if (overloadsSplitSorted.length === 0) return [];\n    for (let i = 0; i < overloadsSplitSorted.length; i++) {\n      const overloadParams = overloadsSplitSorted[i];\n      overloadMatch = overloadParams.every(\n        (p) =>\n          this.hasAttribute(p) ||\n          this.attributeInherited(p) ||\n          isOptional(p) ||\n          p === \"\" ||\n          (i === overloadsSplitSorted.length - 1 && this.attributeInherited(p))\n      );\n\n      //  If matched overload found\n      if (overloadMatch) {\n        //  Filter params recursively\n        const filterParams = (overloadParams, filteredParams = [], i = 0) => {\n          //  If there are no more overload params, return filtered params\n          if (i === overloadParams.length) return filteredParams;\n          const optional = isOptional(overloadParams[i]);\n          const p = overloadParams[i].replaceAll(/\\[|\\]/g, \"\");\n          //  If param defined on this element, add it to filtered params\n          if (this.hasAttribute(p))\n            return filterParams(\n              overloadParams,\n              filteredParams.concat({ owner: this.this_element, param: p }),\n              ++i\n            );\n          //  If not defined on this element and optional, return filtered params\n          if (optional) return filteredParams;\n          //  If required and already initialized, add it to filtered params\n          if (this.attributeInherited(p))\n            return filterParams(\n              overloadParams,\n              filteredParams.concat({ owner: this.this_element, param: p }),\n              ++i\n            );\n          return filteredParams;\n        };\n        return filterParams(overloadParams);\n      }\n    }\n    console.error(\n      `Element ${this.tagName} does not have the required attributes to render and will be removed from the sketch`\n    );\n    this.remove();\n  }\n  /**\n   * @private\n   */\n  setupRenderFunction() {\n    const args = this.#getArgumentsFromOverloads();\n    this.render = function () {\n      this.pInst[this.renderFunctionName](\n        ...args.map(({ param, owner }) => owner[param])\n      );\n    };\n  }\n}\n/**\n * The blank `<_>` element renders nothing to the canvas. This is useful\n * for adjusting attributes for child elements.\n * @element _\n */\nclass _ extends P5Element {\n  constructor() {\n    super();\n  }\n}\ncustomElements.define(\"p-_\", _);\n","export const addCanvasProperties = (baseClass) =>\r\n  class extends baseClass {\r\n    #background;\r\n    /**\r\n     * The background property sets the color or image used\r\n     * for the background of the p5.js canvas. The default background is transparent.\r\n     * A <a href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a> object can be provided to set the background color.\r\n     *\r\n     * A <a href=\"https://p5js.org/reference/#/p5.Image\">p5.Image</a> can also be provided to set the background image.\r\n     *\r\n     * The arguments to <a href=\"https://p5js.org/reference/#/p5/color\">color()</a> can also be provided,\r\n     * separated by commas.\r\n     * @type {p5.Color|p5.Image}\r\n     */\r\n    get background() {\r\n      return this.#background;\r\n    }\r\n    set background(c) {\r\n      if (c instanceof p5.Color || c instanceof p5.Image) this.#background = c;\r\n      this.#background = this.pInst.color(c);\r\n    }\r\n    /**\r\n     * Sets the cursor when hovering over the canvas.\r\n     *\r\n     * You can set cursor to any of the following constants:\r\n     * ARROW, CROSS, HAND, MOVE, TEXT and WAIT\r\n     *\r\n     * You may also set cursor to the URL of an image file. The recommended size\r\n     * is 16x16 or 32x32 pixels. (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\r\n     *\r\n     * For more information on Native CSS cursors and url visit:\r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\r\n     *\r\n     * You may also set cursor to \"type, x, y\", where type is one of the types above,\r\n     * x is the horizontal active spot of the cursor (must be less than 32)\r\n     * and\r\n     * y is the vertical active spot of the cursor (must be less than 32)\r\n     * @type {string}\r\n     */\r\n    get cursor() {\r\n      return this.style.cursor;\r\n    }\r\n    set cursor(val) {\r\n      const { pInst } = this;\r\n      if (val === this.NONE) pInst.noCursor();\r\n      else if (Array.isArray(val)) pInst.cursor(...val);\r\n      else pInst.cursor(val);\r\n    }\r\n    get description() {\r\n      const { pInst } = this;\r\n      const cnvId = this.id;\r\n      const descContainer = pInst.dummyDOM.querySelector(\r\n        `#${cnvId}_Description`\r\n      );\r\n      if (descContainer) return descContainer;\r\n      const labelContainer = pInst.dummyDOM.querySelector(`#${cnvId}_Label`);\r\n      return labelContainer;\r\n    }\r\n    set description(val) {\r\n      if (Array.isArray(val)) this.pInst.describe(...val);\r\n      else this.pInst.describe(val);\r\n    }\r\n    /**\r\n     * The height of the canvas in pixels.\r\n     * @type {number}\r\n     */\r\n    get height() {\r\n      return this.pInst.height;\r\n    }\r\n    set height(val) {\r\n      if (val === this.height || isNaN(val)) return;\r\n      this.#resize(this.width, val);\r\n    }\r\n    get orderedAttributeNames() {\r\n      //  Remove 'is' and 'style' from attrNames\r\n      return super.orderedAttributeNames.filter(\r\n        (v) => v !== \"is\" && v != \"style\"\r\n      );\r\n    }\r\n    set loop(val) {\r\n      if (val) this.pInst.loop();\r\n      else this.pInst.noLoop();\r\n    }\r\n    #resize(w, h) {\r\n      if (w === this.width && h === this.height) return;\r\n      const { pInst } = this;\r\n      const props = {};\r\n      for (const key in pInst.drawingContext) {\r\n        const val = pInst.drawingContext[key];\r\n        if (typeof val !== \"object\" && typeof val !== \"function\") {\r\n          props[key] = val;\r\n        }\r\n      }\r\n      pInst.width = pInst._renderer.width = w;\r\n      pInst.height = pInst._renderer.height = h;\r\n      this.setAttribute(\"width\", w * pInst._pixelDensity);\r\n      this.setAttribute(\"height\", h * pInst._pixelDensity);\r\n      this.style.width = `${w}px`;\r\n      this.style.height = `${h}px`;\r\n      pInst.drawingContext.scale(pInst._pixelDensity, pInst._pixelDensity);\r\n      for (const savedKey in props) {\r\n        try {\r\n          pInst.drawingContext[savedKey] = props[savedKey];\r\n        } catch (err) {}\r\n      }\r\n      pInst.drawingContext.scale(pInst._pixelDensity, pInst._pixelDensity);\r\n      pInst.redraw();\r\n    }\r\n    /**\r\n     * The width of the canvas in pixels.\r\n     * @type {number}\r\n     */\r\n    get width() {\r\n      return this.pInst.width;\r\n    }\r\n    set width(val) {\r\n      if (val === this.width || isNaN(val)) return;\r\n      this.#resize(val, this.height);\r\n    }\r\n  };\r\n","export const addCanvasMethods = (baseClass) =>\r\n  class extends baseClass {\r\n    attributeInherited(attributeName) {\r\n      if (this.hasAttribute(attributeName) || attributeName in this.defaults)\r\n        return true;\r\n      return super.attributeInherited(attributeName);\r\n    }\r\n    runCode() {\r\n      const canvas = this;\r\n      const sketch = (pInst) => {\r\n        canvas.defaults = {\r\n          x: 0,\r\n          x1: 0,\r\n          x2: 0,\r\n          x3: 100,\r\n          x4: 100,\r\n          cx: 0,\r\n          y: 0,\r\n          y1: 0,\r\n          y2: 100,\r\n          y3: 100,\r\n          y4: 0,\r\n          cy: 0,\r\n          z: 0,\r\n          w: 100,\r\n          h: 100,\r\n          d: 100,\r\n          size: 100,\r\n          start_angle: 0,\r\n          stop_angle: pInst.PI,\r\n          vector: pInst.createVector(),\r\n          v1: 255,\r\n          v2: 255,\r\n          v3: 255,\r\n          rx: 1,\r\n          ry: 1,\r\n          rz: -1,\r\n          img: pInst.createImage(100, 100),\r\n          content: \"\",\r\n          on: true,\r\n          repeat: false,\r\n          change: {},\r\n        };\r\n\r\n        pInst.preload = () => pInst.loadAssets();\r\n\r\n        pInst.setup = function () {\r\n          canvas.setup(pInst, canvas);\r\n          // Set default dimensions (100, 100)\r\n          canvas.width = 100;\r\n          canvas.height = 100;\r\n          //  Set default background to transparent\r\n          canvas.background = pInst.color(0, 0);\r\n          pInst.assignCanvas(canvas, canvas.constructor.renderer);\r\n        };\r\n        pInst.draw = function () {\r\n          const state = canvas.updateState(canvas.defaults);\r\n          pInst.background(canvas.background);\r\n          for (const child of canvas.children) {\r\n            child.draw?.(state);\r\n          }\r\n        };\r\n      };\r\n      new p5(sketch);\r\n    }\r\n  };\r\n","import { addP5PropsAndMethods } from \"../core\";\r\nimport { addCanvasProperties } from \"../properties/canvas_props\";\r\nimport { addCanvasMethods } from \"../methods/canvas_methods\";\r\n\r\n/**\r\n * The `<canvas>` element is a rectangular area of the window for rendering\r\n * imagery. All child elements are rendered to the canvas.\r\n *\r\n * This canvas will render 2D elements only. For a 3D canvas, use\r\n * ```<canvas-3d>```.\r\n */\r\nclass Canvas extends addCanvasMethods(\r\n  addCanvasProperties(addP5PropsAndMethods(HTMLCanvasElement))\r\n) {\r\n  static renderer = \"p2d\";\r\n\r\n  constructor() {\r\n    super();\r\n    window.addEventListener(\"customElementsDefined\", this.runCode.bind(this));\r\n  }\r\n}\r\ncustomElements.define(\"p-canvas\", Canvas, { extends: \"canvas\" });\r\n\r\n/**\r\n * The ```<canvas-3d>``` element is a ```<canvas>``` element\r\n * for rendering 3D elements.\r\n */\r\nclass WebGLCanvas extends addCanvasMethods(\r\n  addCanvasProperties(addP5PropsAndMethods(HTMLCanvasElement))\r\n) {\r\n  #bezier_detail;\r\n  #curve_detail;\r\n  #debug_mode;\r\n  #orbit_control;\r\n  static renderer = \"webgl\";\r\n  constructor() {\r\n    super();\r\n    window.addEventListener(\"customElementsDefined\", this.runCode.bind(this));\r\n  }\r\n  /**\r\n   * Sets the resolution at which Bezier's curve is displayed. The default value is 20.\r\n   * @type {number}\r\n   */\r\n  get bezier_detail() {\r\n    return this.#bezier_detail;\r\n  }\r\n  set bezier_detail(val) {\r\n    this.pInst.bezierDetail(val);\r\n    this.#bezier_detail = this.pInst._bezierDetail;\r\n  }\r\n  /**\r\n   * Sets the current (active) camera of a 3D sketch.\r\n   * Allows for switching between multiple cameras.\r\n   *\r\n   * Comma-separated arguments for\r\n   * <a href=\"https://p5js.org/reference/#/p5/camera\">camera()</a>\r\n   * may also be provided to adjust the current camera.\r\n   *\r\n   * @type {p5.Camera}\r\n   * */\r\n  get camera() {\r\n    return this.pInst._renderer._curCamera;\r\n  }\r\n  set camera(val) {\r\n    const { pInst } = this;\r\n    if (val instanceof p5.Camera) pInst.setCamera(val);\r\n    else if (Array.isArray(val)) pInst.camera(...val);\r\n    else pInst.camera(val);\r\n  }\r\n  /**\r\n   * Sets the resolution at which curves display. The default value is 20 while\r\n   * the minimum value is 3.\r\n   * @type {number}\r\n   */\r\n  get curve_detail() {\r\n    return this.#curve_detail;\r\n  }\r\n  set curve_detail(val) {\r\n    this.pInst.curveDetail(val);\r\n    this.#curve_detail = this.pInst._curveDetail;\r\n  }\r\n  /**\r\n   * debug_mode helps visualize 3D space by adding a grid to indicate where the\r\n   * ‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\r\n   * directions. This property can be set to \"true\" to create a\r\n   * default grid and axes icon, or it can be set to a comma-separated list\r\n   * of values to pass into\r\n   * <a href=\"https://p5js.org/reference/#/p5/debugMode\">debugMode()</a>.\r\n   *\r\n   * By default, the grid will run through the origin (0,0,0) of the sketch\r\n   * along the XZ plane\r\n   * and the axes icon will be offset from the origin.  Both the grid and axes\r\n   * icon will be sized according to the current canvas size.\r\n   * Note that because the\r\n   * grid runs parallel to the default camera view, it is often helpful to use\r\n   * debug_mode along with orbit_control to allow full view of the grid.\r\n   * @type {boolean}\r\n   */\r\n  get debug_mode() {\r\n    return this.#debug_mode;\r\n  }\r\n  set debug_mode(val) {\r\n    const { pInst } = this;\r\n    if (val === false) {\r\n      pInst.noDebugMode();\r\n      this.#debug_mode = false;\r\n      return;\r\n    } else if (val === true) pInst.debugMode();\r\n    else if (Array.isArray(val)) pInst.debugMode(...val);\r\n    else pInst.debugMode(val);\r\n    this.#debug_mode = true;\r\n  }\r\n  /**\r\n   * Allows movement around a 3D sketch using a mouse or trackpad.\r\n   * Left-clicking and dragging will rotate the camera position about the\r\n   * center of the sketch,\r\n   * right-clicking and dragging will pan the camera position without rotation,\r\n   * and using the mouse wheel (scrolling) will move the camera closer or\r\n   * further\r\n   * from the center of the sketch. This property can be set with parameters\r\n   * dictating sensitivity to mouse movement along the X, Y, and Z axes.\r\n   * Setting orbit_control=\"true\" is equivalent to setting\r\n   * orbit_control=\"1, 1\".\r\n   * To reverse direction of movement in either axis, enter a negative number\r\n   * for sensitivity.\r\n   * @type {boolean}\r\n   * */\r\n  get orbit_control() {\r\n    return this.#orbit_control;\r\n  }\r\n  set orbit_control(val) {\r\n    if (val === false) return (this.#orbit_control = false);\r\n    this.#orbit_control = true;\r\n    if (Array.isArray(val)) return this.pInst.orbitControl(...val);\r\n    this.pInst.orbitControl();\r\n  }\r\n  /**\r\n   * Sets an orthographic projection for the current camera in a 3D sketch\r\n   * and defines a box-shaped viewing frustum within which objects are seen.\r\n   * In this projection, all objects with the same dimension appear the same\r\n   * size, regardless of whether they are near or far from the camera.\r\n   *\r\n   * This may be set to a comma-separated list of arguments to\r\n   * <a href=\"https://p5js.org/reference/#/p5/ortho\">ortho()</a>\r\n   *\r\n   * If set to \"true\", the following default is used:\r\n   * ortho(-width/2, width/2, -height/2, height/2).\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  set ortho(val) {\r\n    if (val === true) this.pInst.ortho();\r\n    else if (Array.isArray(val)) this.pInst.ortho(...val);\r\n    else if (val !== false) this.pInst.ortho(val);\r\n  }\r\n}\r\ncustomElements.define(\"p-canvas-3d\", WebGLCanvas, {\r\n  extends: \"canvas\",\r\n});\r\n","/*\nRepo: https://github.com/bmoren/p5.collide2D/\nCreated by http://benmoren.com\nSome functions and code modified version from http://www.jeffreythompson.org/collision-detection\nVersion v0.7.3 | June 22, 2020\nCC BY-NC-SA 4.0\n*/\n\np5.prototype._collide_debug = false;\n\np5.prototype.collide_debug = function (debugMode) {\n  _collideDebug = debugMode;\n};\n\np5.prototype.collider_type = {\n  point: \"point\",\n  circle: \"circle\",\n  ellipse: \"ellipse\",\n  rect: \"rect\",\n  line: \"line\",\n  arc: \"arc\",\n  triangle: \"triangle\",\n  poly: \"poly\",\n};\n\np5.prototype.collide_elements = function (elementA, elementB) {\n  const { collider: colliderA } = elementA;\n  const { collider: colliderB } = elementB;\n  const argsA = elementA.collision_args;\n  const argsB = elementB.collision_args;\n  const fnNameForward = `collide_${colliderA}_${colliderB}`;\n  if (fnNameForward in this) return this[fnNameForward](...argsA, ...argsB);\n  const fnNameBackward = `collide_${colliderB}_${colliderA}`;\n  if (fnNameBackward in this) return this[fnNameBackward](...argsB, ...argsA);\n  console.warn(\n    `Collision check between ${colliderA} and ${colliderB} has not been implemented`\n  );\n  return false;\n};\n\n/*~++~+~+~++~+~++~++~+~+~ 2D ~+~+~++~+~++~+~+~+~+~+~+~+~+~+~+*/\n\np5.prototype.collide_rect_rect = function (x, y, w, h, x2, y2, w2, h2) {\n  //2d\n  //add in a thing to detect rectMode CENTER\n  if (\n    x + w >= x2 && // r1 right edge past r2 left\n    x <= x2 + w2 && // r1 left edge past r2 right\n    y + h >= y2 && // r1 top edge past r2 bottom\n    y <= y2 + h2\n  ) {\n    // r1 bottom edge past r2 top\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collideRectRect\np5.prototype.collide_rect_rect_vector = function (p1, sz, p2, sz2) {\n  return p5.prototype.collide_rect_rect(\n    p1.x,\n    p1.y,\n    sz.x,\n    sz.y,\n    p2.x,\n    p2.y,\n    sz2.x,\n    sz2.y\n  );\n};\n\np5.prototype.collide_rect_circle = function (rx, ry, rw, rh, cx, cy, diameter) {\n  //2d\n  // temporary variables to set edges for testing\n  var testX = cx;\n  var testY = cy;\n\n  // which edge is closest?\n  if (cx < rx) {\n    testX = rx; // left edge\n  } else if (cx > rx + rw) {\n    testX = rx + rw;\n  } // right edge\n\n  if (cy < ry) {\n    testY = ry; // top edge\n  } else if (cy > ry + rh) {\n    testY = ry + rh;\n  } // bottom edge\n\n  // // get distance from closest edges\n  var distance = this.dist(cx, cy, testX, testY);\n\n  // if the distance is less than the radius, collision!\n  if (distance <= diameter / 2) {\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collideRectCircle\np5.prototype.collide_rect_circle_vector = function (r, sz, c, diameter) {\n  return p5.prototype.collide_rect_circle(\n    r.x,\n    r.y,\n    sz.x,\n    sz.y,\n    c.x,\n    c.y,\n    diameter\n  );\n};\n\np5.prototype.collide_circle_circle = function (x, y, d, x2, y2, d2) {\n  //2d\n  if (this.dist(x, y, x2, y2) <= d / 2 + d2 / 2) {\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collideCircleCircle\np5.prototype.collide_circle_circle_vector = function (p1, d, p2, d2) {\n  return p5.prototype.collide_circle_circle(p1.x, p1.y, d, p2.x, p2.y, d2);\n};\n\np5.prototype.collide_point_circle = function (x, y, cx, cy, d) {\n  //2d\n  if (this.dist(x, y, cx, cy) <= d / 2) {\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collidePointCircle\np5.prototype.collide_point_circle_vector = function (p, c, d) {\n  return p5.prototype.collide_point_circle(p.x, p.y, c.x, c.y, d);\n};\n\np5.prototype.collide_point_ellipse = function (x, y, cx, cy, dx, dy) {\n  //2d\n  var rx = dx / 2,\n    ry = dy / 2;\n  // Discarding the points outside the bounding box\n  if (x > cx + rx || x < cx - rx || y > cy + ry || y < cy - ry) {\n    return false;\n  }\n  // Compare the point to its equivalent on the ellipse\n  var xx = x - cx,\n    yy = y - cy;\n  var eyy = (ry * this.sqrt(this.abs(rx * rx - xx * xx))) / rx;\n  return yy <= eyy && yy >= -eyy;\n};\n\n// p5.vector version of collidePointEllipse\np5.prototype.collide_point_ellipse_vector = function (p, c, d) {\n  return p5.prototype.collide_point_ellipse(p.x, p.y, c.x, c.y, d.x, d.y);\n};\n\np5.prototype.collide_point_rect = function (pointX, pointY, x, y, xW, yW) {\n  //2d\n  if (\n    pointX >= x && // right of the left edge AND\n    pointX <= x + xW && // left of the right edge AND\n    pointY >= y && // below the top AND\n    pointY <= y + yW\n  ) {\n    // above the bottom\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collidePointRect\np5.prototype.collide_point_rect_vector = function (point, p1, sz) {\n  return p5.prototype.collide_point_rect(\n    point.x,\n    point.y,\n    p1.x,\n    p1.y,\n    sz.x,\n    sz.y\n  );\n};\n//  TODO - Accommodate lines with higher stroke_weight\np5.prototype.collide_point_line = function (px, py, x1, y1, x2, y2, buffer) {\n  // get distance from the point to the two ends of the line\n  var d1 = this.dist(px, py, x1, y1);\n  var d2 = this.dist(px, py, x2, y2);\n\n  // get the length of the line\n  var lineLen = this.dist(x1, y1, x2, y2);\n\n  // since floats are so minutely accurate, add a little buffer zone that will give collision\n  if (buffer === undefined) {\n    buffer = 0.1;\n  } // higher # = less accurate\n\n  // if the two distances are equal to the line's length, the point is on the line!\n  // note we use the buffer here to give a range, rather than one #\n  if (d1 + d2 >= lineLen - buffer && d1 + d2 <= lineLen + buffer) {\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collidePointLine\np5.prototype.collide_point_line_vector = function (point, p1, p2, buffer) {\n  return p5.prototype.collide_point_line(\n    point.x,\n    point.y,\n    p1.x,\n    p1.y,\n    p2.x,\n    p2.y,\n    buffer\n  );\n};\n\np5.prototype.collide_line_circle = function (x1, y1, x2, y2, cx, cy, diameter) {\n  // is either end INSIDE the circle?\n  // if so, return true immediately\n  var inside1 = this.collide_point_circle(x1, y1, cx, cy, diameter);\n  var inside2 = this.collide_point_circle(x2, y2, cx, cy, diameter);\n  if (inside1 || inside2) return true;\n\n  // get length of the line\n  var distX = x1 - x2;\n  var distY = y1 - y2;\n  var len = this.sqrt(distX * distX + distY * distY);\n\n  // get dot product of the line and circle\n  var dot = ((cx - x1) * (x2 - x1) + (cy - y1) * (y2 - y1)) / this.pow(len, 2);\n\n  // find the closest point on the line\n  var closestX = x1 + dot * (x2 - x1);\n  var closestY = y1 + dot * (y2 - y1);\n\n  // is this point actually on the line segment?\n  // if so keep going, but if not, return false\n  var onSegment = this.collide_point_line(closestX, closestY, x1, y1, x2, y2);\n  if (!onSegment) return false;\n\n  // draw a debug circle at the closest point on the line\n  if (this._collideDebug) {\n    this.ellipse(closestX, closestY, 10, 10);\n  }\n\n  // get distance to closest point\n  distX = closestX - cx;\n  distY = closestY - cy;\n  var distance = this.sqrt(distX * distX + distY * distY);\n\n  if (distance <= diameter / 2) {\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collideLineCircle\np5.prototype.collide_line_circle_vector = function (p1, p2, c, diameter) {\n  return p5.prototype.collide_line_circle(\n    p1.x,\n    p1.y,\n    p2.x,\n    p2.y,\n    c.x,\n    c.y,\n    diameter\n  );\n};\np5.prototype.collide_line_line = function (\n  x1,\n  y1,\n  x2,\n  y2,\n  x3,\n  y3,\n  x4,\n  y4,\n  calcIntersection\n) {\n  var intersection;\n\n  // calculate the distance to intersection point\n  var uA =\n    ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n  var uB =\n    ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  // if uA and uB are between 0-1, lines are colliding\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    if (this._collideDebug || calcIntersection) {\n      // calc the point where the lines meet\n      var intersectionX = x1 + uA * (x2 - x1);\n      var intersectionY = y1 + uA * (y2 - y1);\n    }\n\n    if (this._collideDebug) {\n      this.ellipse(intersectionX, intersectionY, 10, 10);\n    }\n\n    if (calcIntersection) {\n      intersection = {\n        x: intersectionX,\n        y: intersectionY,\n      };\n      return intersection;\n    } else {\n      return true;\n    }\n  }\n  if (calcIntersection) {\n    intersection = {\n      x: false,\n      y: false,\n    };\n    return intersection;\n  }\n  return false;\n};\n\n// p5.vector version of collideLineLine\np5.prototype.collide_line_line_vector = function (\n  p1,\n  p2,\n  p3,\n  p4,\n  calcIntersection\n) {\n  return p5.prototype.collide_line_line(\n    p1.x,\n    p1.y,\n    p2.x,\n    p2.y,\n    p3.x,\n    p3.y,\n    p4.x,\n    p4.y,\n    calcIntersection\n  );\n};\n\np5.prototype.collide_line_rect = function (\n  x1,\n  y1,\n  x2,\n  y2,\n  rx,\n  ry,\n  rw,\n  rh,\n  calcIntersection\n) {\n  // check if the line has hit any of the rectangle's sides. uses the collideLineLine function above\n  var left, right, top, bottom, intersection;\n\n  if (calcIntersection) {\n    left = this.collide_line_line(x1, y1, x2, y2, rx, ry, rx, ry + rh, true);\n    right = this.collide_line_line(\n      x1,\n      y1,\n      x2,\n      y2,\n      rx + rw,\n      ry,\n      rx + rw,\n      ry + rh,\n      true\n    );\n    top = this.collide_line_line(x1, y1, x2, y2, rx, ry, rx + rw, ry, true);\n    bottom = this.collide_line_line(\n      x1,\n      y1,\n      x2,\n      y2,\n      rx,\n      ry + rh,\n      rx + rw,\n      ry + rh,\n      true\n    );\n    intersection = {\n      left: left,\n      right: right,\n      top: top,\n      bottom: bottom,\n    };\n  } else {\n    //return booleans\n    left = this.collide_line_line(x1, y1, x2, y2, rx, ry, rx, ry + rh);\n    right = this.collide_line_line(\n      x1,\n      y1,\n      x2,\n      y2,\n      rx + rw,\n      ry,\n      rx + rw,\n      ry + rh\n    );\n    top = this.collide_line_line(x1, y1, x2, y2, rx, ry, rx + rw, ry);\n    bottom = this.collide_line_line(\n      x1,\n      y1,\n      x2,\n      y2,\n      rx,\n      ry + rh,\n      rx + rw,\n      ry + rh\n    );\n  }\n\n  // if ANY of the above are true, the line has hit the rectangle\n  if (left || right || top || bottom) {\n    if (calcIntersection) {\n      return intersection;\n    }\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collideLineRect\np5.prototype.collide_line_rect_vector = function (\n  p1,\n  p2,\n  r,\n  rsz,\n  calcIntersection\n) {\n  return p5.prototype.collide_line_rect(\n    p1.x,\n    p1.y,\n    p2.x,\n    p2.y,\n    r.x,\n    r.y,\n    rsz.x,\n    rsz.y,\n    calcIntersection\n  );\n};\n\np5.prototype.collide_point_poly = function (px, py, vertices) {\n  var collision = false;\n\n  // go through each of the vertices, plus the next vertex in the list\n  var next = 0;\n  for (var current = 0; current < vertices.length; current++) {\n    // get next vertex in list if we've hit the end, wrap around to 0\n    next = current + 1;\n    if (next === vertices.length) next = 0;\n\n    // get the PVectors at our current position this makes our if statement a little cleaner\n    var vc = vertices[current]; // c for \"current\"\n    var vn = vertices[next]; // n for \"next\"\n\n    // compare position, flip 'collision' variable back and forth\n    if (\n      ((vc.y >= py && vn.y < py) || (vc.y < py && vn.y >= py)) &&\n      px < ((vn.x - vc.x) * (py - vc.y)) / (vn.y - vc.y) + vc.x\n    ) {\n      collision = !collision;\n    }\n  }\n  return collision;\n};\n\n// p5.vector version of collidePointPoly\np5.prototype.collide_point_poly_vector = function (p1, vertices) {\n  return p5.prototype.collide_point_poly(p1.x, p1.y, vertices);\n};\n\n// POLYGON/CIRCLE\np5.prototype.collide_circle_poly = function (\n  cx,\n  cy,\n  diameter,\n  vertices,\n  interior\n) {\n  if (interior === undefined) {\n    interior = false;\n  }\n\n  // go through each of the vertices, plus the next vertex in the list\n  var next = 0;\n  for (var current = 0; current < vertices.length; current++) {\n    // get next vertex in list if we've hit the end, wrap around to 0\n    next = current + 1;\n    if (next === vertices.length) next = 0;\n\n    // get the PVectors at our current position this makes our if statement a little cleaner\n    var vc = vertices[current]; // c for \"current\"\n    var vn = vertices[next]; // n for \"next\"\n\n    // check for collision between the circle and a line formed between the two vertices\n    var collision = this.collide_line_circle(\n      vc.x,\n      vc.y,\n      vn.x,\n      vn.y,\n      cx,\n      cy,\n      diameter\n    );\n    if (collision) return true;\n  }\n\n  // test if the center of the circle is inside the polygon\n  if (interior === true) {\n    var centerInside = this.collide_point_poly(cx, cy, vertices);\n    if (centerInside) return true;\n  }\n\n  // otherwise, after all that, return false\n  return false;\n};\n\n// p5.vector version of collideCirclePoly\np5.prototype.collide_circle_poly_vector = function (\n  c,\n  diameter,\n  vertices,\n  interior\n) {\n  return p5.prototype.collide_circle_poly(\n    c.x,\n    c.y,\n    diameter,\n    vertices,\n    interior\n  );\n};\n\np5.prototype.collide_rect_poly = function (rx, ry, rw, rh, vertices, interior) {\n  if (interior == undefined) {\n    interior = false;\n  }\n\n  // go through each of the vertices, plus the next vertex in the list\n  var next = 0;\n  for (var current = 0; current < vertices.length; current++) {\n    // get next vertex in list if we've hit the end, wrap around to 0\n    next = current + 1;\n    if (next === vertices.length) next = 0;\n\n    // get the PVectors at our current position this makes our if statement a little cleaner\n    var vc = vertices[current]; // c for \"current\"\n    var vn = vertices[next]; // n for \"next\"\n\n    // check against all four sides of the rectangle\n    var collision = this.collide_line_rect(\n      vc.x,\n      vc.y,\n      vn.x,\n      vn.y,\n      rx,\n      ry,\n      rw,\n      rh\n    );\n    if (collision) return true;\n\n    // optional: test if the rectangle is INSIDE the polygon note that this iterates all sides of the polygon again, so only use this if you need to\n    if (interior === true) {\n      var inside = this.collide_point_poly(rx, ry, vertices);\n      if (inside) return true;\n    }\n  }\n\n  return false;\n};\n\n// p5.vector version of collideRectPoly\np5.prototype.collide_rect_poly_vector = function (r, rsz, vertices, interior) {\n  return p5.prototype.collide_rect_poly(\n    r.x,\n    r.y,\n    rsz.x,\n    rsz.y,\n    vertices,\n    interior\n  );\n};\n\np5.prototype.collide_line_poly = function (x1, y1, x2, y2, vertices) {\n  // go through each of the vertices, plus the next vertex in the list\n  var next = 0;\n  for (var current = 0; current < vertices.length; current++) {\n    // get next vertex in list if we've hit the end, wrap around to 0\n    next = current + 1;\n    if (next === vertices.length) next = 0;\n\n    // get the PVectors at our current position extract X/Y coordinates from each\n    var x3 = vertices[current].x;\n    var y3 = vertices[current].y;\n    var x4 = vertices[next].x;\n    var y4 = vertices[next].y;\n\n    // do a Line/Line comparison if true, return 'true' immediately and stop testing (faster)\n    var hit = this.collide_line_line(x1, y1, x2, y2, x3, y3, x4, y4);\n    if (hit) {\n      return true;\n    }\n  }\n  // never got a hit\n  return false;\n};\n\n// p5.vector version of collideLinePoly\np5.prototype.collide_line_poly_vector = function (p1, p2, vertice) {\n  return p5.prototype.collide_line_poly(p1.x, p1.y, p2.x, p2.y, vertice);\n};\n\np5.prototype.collide_poly_poly = function (p1, p2, interior) {\n  if (interior === undefined) {\n    interior = false;\n  }\n\n  // go through each of the vertices, plus the next vertex in the list\n  var next = 0;\n  for (var current = 0; current < p1.length; current++) {\n    // get next vertex in list, if we've hit the end, wrap around to 0\n    next = current + 1;\n    if (next === p1.length) next = 0;\n\n    // get the PVectors at our current position this makes our if statement a little cleaner\n    var vc = p1[current]; // c for \"current\"\n    var vn = p1[next]; // n for \"next\"\n\n    //use these two points (a line) to compare to the other polygon's vertices using polyLine()\n    var collision = this.collide_line_poly(vc.x, vc.y, vn.x, vn.y, p2);\n    if (collision) return true;\n\n    //check if the either polygon is INSIDE the other\n    if (interior === true) {\n      collision = this.collide_point_poly(p2[0].x, p2[0].y, p1);\n      if (collision) return true;\n      collision = this.collide_point_poly(p1[0].x, p1[0].y, p2);\n      if (collision) return true;\n    }\n  }\n\n  return false;\n};\n\np5.prototype.collide_poly_poly_vector = function (p1, p2, interior) {\n  return p5.prototype.collide_poly_poly(p1, p2, interior);\n};\n\np5.prototype.collide_point_triangle = function (\n  px,\n  py,\n  x1,\n  y1,\n  x2,\n  y2,\n  x3,\n  y3\n) {\n  // get the area of the triangle\n  var areaOrig = this.abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1));\n\n  // get the area of 3 triangles made between the point and the corners of the triangle\n  var area1 = this.abs((x1 - px) * (y2 - py) - (x2 - px) * (y1 - py));\n  var area2 = this.abs((x2 - px) * (y3 - py) - (x3 - px) * (y2 - py));\n  var area3 = this.abs((x3 - px) * (y1 - py) - (x1 - px) * (y3 - py));\n\n  // if the sum of the three areas equals the original, we're inside the triangle!\n  if (area1 + area2 + area3 === areaOrig) {\n    return true;\n  }\n  return false;\n};\n\n// p5.vector version of collidePointTriangle\np5.prototype.collide_point_triangle_vector = function (p, p1, p2, p3) {\n  return p5.prototype.collide_point_triangle(\n    p.x,\n    p.y,\n    p1.x,\n    p1.y,\n    p2.x,\n    p2.y,\n    p3.x,\n    p3.y\n  );\n};\n\np5.prototype.collide_point_point = function (x, y, x2, y2, buffer) {\n  if (buffer === undefined) {\n    buffer = 0;\n  }\n\n  if (this.dist(x, y, x2, y2) <= buffer) {\n    return true;\n  }\n\n  return false;\n};\n\n// p5.vector version of collidePointPoint\np5.prototype.collide_point_point_vector = function (p1, p2, buffer) {\n  return p5.prototype.collide_point_point(p1.x, p1.y, p2.x, p2.y, buffer);\n};\n//  TODO - accommodate arcs with unequal width and height\np5.prototype.collide_point_arc = function (\n  px,\n  py,\n  ax,\n  ay,\n  arcRadius,\n  arcHeading,\n  arcAngle,\n  buffer\n) {\n  if (buffer === undefined) {\n    buffer = 0;\n  }\n  // point\n  var point = this.createVector(px, py);\n  // arc center point\n  var arcPos = this.createVector(ax, ay);\n  // arc radius vector\n  var radius = this.createVector(arcRadius, 0).rotate(arcHeading);\n\n  var pointToArc = point.copy().sub(arcPos);\n\n  if (point.dist(arcPos) <= arcRadius + buffer) {\n    var dot = radius.dot(pointToArc);\n    var angle = radius.angleBetween(pointToArc);\n    if (dot > 0 && angle <= arcAngle / 2 && angle >= -arcAngle / 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// p5.vector version of collidePointArc\np5.prototype.collide_point_arc_vector = function (\n  p1,\n  a,\n  arcRadius,\n  arcHeading,\n  arcAngle,\n  buffer\n) {\n  return p5.prototype.collide_point_arc(\n    p1.x,\n    p1.y,\n    a.x,\n    a.y,\n    arcRadius,\n    arcHeading,\n    arcAngle,\n    buffer\n  );\n};\n","export const addXY = (baseClass) =>\r\n  class extends baseClass {\r\n    #x;\r\n    #y;\r\n    /**\r\n     * The x-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get x() {\r\n      return this.#x;\r\n    }\r\n    set x(val) {\r\n      if (!isNaN(val)) this.#x = Number(val);\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s x property is being set to ${val}, but it may only be set to a number`\r\n        );\r\n    }\r\n    /**\r\n     * The y-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get y() {\r\n      return this.#y;\r\n    }\r\n    set y(val) {\r\n      if (!isNaN(val)) this.#y = Number(val);\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s y property is being set to ${val}, but it may only be set to a number`\r\n        );\r\n    }\r\n  };\r\n\r\nexport const addXYZ = (baseClass) =>\r\n  class extends addXY(baseClass) {\r\n    #z;\r\n    /**\r\n     * The z-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get z() {\r\n      return this.#z;\r\n    }\r\n    set z(val) {\r\n      if (!isNaN(val)) this.#z = Number(val);\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s z property is being set to ${val}, but it may only be set to a number`\r\n        );\r\n    }\r\n  };\r\n\r\nexport const addWidthHeight = (baseClass) =>\r\n  class extends baseClass {\r\n    #height;\r\n    #width;\r\n    /**\r\n     * The height of the element in pixels.\r\n     * @type {number}\r\n     */\r\n    get height() {\r\n      return this.#height;\r\n    }\r\n    set height(val) {\r\n      if (!isNaN(val)) this.#height = Number(val);\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s height is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The width of the element in pixels.\r\n     * @type {number}\r\n     */\r\n    get width() {\r\n      return this.#width;\r\n    }\r\n    set width(val) {\r\n      if (!isNaN(val)) this.#width = Number(val);\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s width is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n  };\r\n\r\nexport const addXY12 = (baseClass) =>\r\n  class extends baseClass {\r\n    #x1;\r\n    #y1;\r\n    #x2;\r\n    #y2;\r\n    /**\r\n     * The first x-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get x1() {\r\n      return this.#x1;\r\n    }\r\n    set x1(val) {\r\n      if (!isNaN(val)) this.#x1 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s x1 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The first y-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get y1() {\r\n      return this.#y1;\r\n    }\r\n    set y1(val) {\r\n      if (!isNaN(val)) this.#y1 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s y1 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The second x-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get x2() {\r\n      return this.#x2;\r\n    }\r\n    set x2(val) {\r\n      if (!isNaN(val)) this.#x2 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s x2 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The second y-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get y2() {\r\n      return this.#y2;\r\n    }\r\n    set y2(val) {\r\n      if (!isNaN(val)) this.#y2 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s y2 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n  };\r\n\r\nexport const addY3 = (baseClass) =>\r\n  class extends baseClass {\r\n    #x3;\r\n    #y3;\r\n    /**\r\n     * The third x-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get x3() {\r\n      return this.#x3;\r\n    }\r\n    set x3(val) {\r\n      if (!isNaN(val)) this.#x3 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s x3 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The third y-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get y3() {\r\n      return this.#y3;\r\n    }\r\n    set y3(val) {\r\n      if (!isNaN(val)) this.#y3 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s y3 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n  };\r\n\r\nexport const addXY123 = (baseClass) =>\r\n  class extends addXY12(addY3(baseClass)) {};\r\n\r\nconst addZ12 = (baseClass) =>\r\n  class extends baseClass {\r\n    #z1;\r\n    #z2;\r\n    /**\r\n     * The first z-coordinate of the element relative to the current anchor. (on 3D canvas only)\r\n     * @type {number}\r\n     */\r\n    get z1() {\r\n      return this.#z1;\r\n    }\r\n    set z1(val) {\r\n      if (!isNaN(val)) this.#z1 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s z1 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The second z-coordinate of the element relative to the current anchor. (on 3D canvas only)\r\n     * @type {number}\r\n     */\r\n    get z2() {\r\n      return this.#z2;\r\n    }\r\n    set z2(val) {\r\n      if (!isNaN(val)) this.#z2 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s z2 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n  };\r\n\r\nexport const addXYZ12 = (baseClass) =>\r\n  class extends addXY12(addZ12(baseClass)) {};\r\n\r\nexport const addRectMode = (baseClass) =>\r\n  class extends baseClass {\r\n    #rect_mode;\r\n    /**\r\n     * Modifies the location from which rectangles are drawn by changing the way\r\n     * in which x and y coordinates are interpreted.\r\n     *\r\n     * The default mode is CORNER, which interprets the x and y as the\r\n     * upper-left corner of the shape.\r\n     *\r\n     * rect_mode=\"CORNERS\" interprets x and y as the location of\r\n     * one of the corners, and width and height as the location of\r\n     * the diagonally opposite corner. Note, the rectangle is drawn between the\r\n     * coordinates, so it is not necessary that the first corner be the upper left\r\n     * corner.\r\n     *\r\n     * rect_mode=\"CENTER\" interprets x and y as the shape's center\r\n     * point.\r\n     *\r\n     * rect_mode=\"RADIUS\" also uses x and y as the shape's\r\n     * center\r\n     * point, but uses width and height to specify half of the shape's\r\n     * width and height respectively.\r\n     *\r\n     * The value to this property must be written in ALL CAPS because they are\r\n     * predefined as constants in ALL CAPS.\r\n     *\r\n     * @type {CORNER|CORNERS|CENTER|RADIUS}\r\n     */\r\n    get rect_mode() {\r\n      return this.#rect_mode;\r\n    }\r\n    set rect_mode(mode) {\r\n      this.pInst.rectMode(mode);\r\n      this.#rect_mode = this.pInst._renderer._rectMode;\r\n    }\r\n  };\r\n\r\nexport const add2DStrokeStyling = (baseClass) =>\r\n  class extends baseClass {\r\n    #smooth = true;\r\n    #stroke_cap = \"round\";\r\n    #stroke_join = \"miter\";\r\n    /**\r\n     * smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\r\n     * improve image quality of resized images. smooth is true by\r\n     * default on a 2D canvas. smooth=\"false\" can be used to disable smoothing of geometry,\r\n     * images, and fonts.\r\n     * @type {boolean}\r\n     */\r\n    get smooth() {\r\n      return this.#smooth;\r\n    }\r\n    set smooth(val) {\r\n      if (typeof val !== \"boolean\")\r\n        return console.error(\r\n          `${this.tagName}'s smooth property is being set to ${val}, but it may only be set to true or false.`\r\n        );\r\n      if (val) this.pInst.smooth();\r\n      else this.pInst.noSmooth();\r\n      this.#smooth = val;\r\n    }\r\n    /**\r\n     * Sets the style for rendering line endings. These ends are either rounded,\r\n     * squared or extended, each of which specified with the corresponding\r\n     * parameters: ROUND, SQUARE and PROJECT. The default cap is ROUND.\r\n     *\r\n     * The value on this property must be written in ALL CAPS because they are\r\n     * predefined as constants in ALL CAPS.\r\n     * @type {ROUND|SQUARE|PROJECT}\r\n     */\r\n    get stroke_cap() {\r\n      return this.#stroke_cap;\r\n    }\r\n    set stroke_cap(val) {\r\n      this.pInst.strokeCap(val);\r\n      this.#stroke_cap = this.pInst.drawingContext.lineCap;\r\n    }\r\n    /**\r\n     * Sets the style of the joints which connect line segments. These joints\r\n     * are either mitered, beveled or rounded and specified with the\r\n     * corresponding parameters MITER, BEVEL and ROUND. The default joint is\r\n     * MITER.\r\n     *\r\n     * The parameter to this method must be written in ALL CAPS because they are\r\n     * predefined as constants in ALL CAPS.\r\n     * @type {MITER|BEVEL|ROUND}\r\n     */\r\n    get stroke_join() {\r\n      return this.#stroke_join;\r\n    }\r\n    set stroke_join(val) {\r\n      this.pInst.strokeJoin(val);\r\n      this.#stroke_join = this.pInst.drawingContext.lineJoin;\r\n    }\r\n  };\r\n\r\nexport const addXYZ1234 = (baseClass) =>\r\n  class extends addY3(addXYZ12(baseClass)) {\r\n    #z3;\r\n    #z4;\r\n    #y4;\r\n    /**\r\n     * The fourth y-coordinate of the element relative to the current anchor.\r\n     * @type {number}\r\n     */\r\n    get y4() {\r\n      return this.#y4;\r\n    }\r\n    set y4(val) {\r\n      if (!isNaN(val)) this.#y4 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s y4 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The third z-coordinate of the element relative to the current anchor. (on 3D canvas only)\r\n     * @type {number}\r\n     */\r\n    get z3() {\r\n      return this.#z3;\r\n    }\r\n    set z3(val) {\r\n      if (!isNaN(val)) this.#z3 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s z3 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n    /**\r\n     * The fourth z-coordinate of the element relative to the current anchor. (on 3D canvas only)\r\n     * @type {number}\r\n     */\r\n    get z4() {\r\n      return this.#z4;\r\n    }\r\n    set z4(val) {\r\n      if (!isNaN(val)) this.#z4 = val;\r\n      else\r\n        console.error(\r\n          `${this.tagName}'s z4 is being set to ${val}, but it may only be set to a number.`\r\n        );\r\n    }\r\n  };\r\n","import { RenderedElement } from \"../core\";\r\nimport { addStroke, addFillStroke } from \"../properties/color_props\";\r\nimport {\r\n  addXY,\r\n  addXYZ,\r\n  addXYZ12,\r\n  addXY123,\r\n  addXYZ1234,\r\n  addWidthHeight,\r\n  addRectMode,\r\n  add2DStrokeStyling,\r\n} from \"../properties/shape_props\";\r\n\r\nconst add2DStroke = (baseClass) => addStroke(add2DStrokeStyling(baseClass));\r\nconst add2DFillStroke = (baseClass) =>\r\n  addFillStroke(add2DStrokeStyling(baseClass));\r\n\r\nconst transformVertexFn = (el) => (v) => {\r\n  const originalPoint = new DOMPoint(v.x, v.y);\r\n  const { x, y } = el.pInst._transform_point_matrix(\r\n    originalPoint,\r\n    el.transform_matrix\r\n  );\r\n  return el.pInst.createVector(x, y);\r\n};\r\n\r\nconst addArcProps = (baseClass) =>\r\n  class extends baseClass {\r\n    #start_angle;\r\n    #stop_angle;\r\n    #mode;\r\n    #detail;\r\n    constructor() {\r\n      super([\"x, y, width, height, start_angle, stop_angle, [mode], [detail]\"]);\r\n    }\r\n    get mouse_over() {\r\n      const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n      const { x, y, width, height, start_angle, stop_angle } = this;\r\n      console.assert(\r\n        width === height,\r\n        \"mouse_over currently only works for arc's with equal width and height.\"\r\n      );\r\n      const arcRadius = width / 2;\r\n      const arcAngle = stop_angle - start_angle;\r\n      const arcRotation = start_angle + arcAngle / 2;\r\n\r\n      return this.pInst.collide_point_arc(\r\n        mouse_trans_pos_x,\r\n        mouse_trans_pos_y,\r\n        x,\r\n        y,\r\n        arcRadius,\r\n        arcRotation,\r\n        arcAngle\r\n      );\r\n    }\r\n    /**\r\n     * Angle to start the arc. Units are radians by default but may be changed\r\n     * to degrees with the degree_mode property.\r\n     * @type {number}\r\n     */\r\n    get start_angle() {\r\n      return this.#start_angle;\r\n    }\r\n    set start_angle(val) {\r\n      this.#start_angle = val;\r\n    }\r\n    /**\r\n     * Angle to stop the arc. Units are radians by default but may be changed\r\n     * to degrees with the degree_mode property.\r\n     * @type {number}\r\n     */\r\n    get stop_angle() {\r\n      return this.#stop_angle;\r\n    }\r\n    set stop_angle(val) {\r\n      this.#stop_angle = val;\r\n    }\r\n    /**\r\n     * determines the way of drawing the arc:\r\n     * - OPEN - like an open semi-circle\r\n     * - CHORD - closed semi-circle\r\n     * - PIE - closed pie segment\r\n     * @type {CHORD|PIE|OPEN}\r\n     */\r\n    get mode() {\r\n      return this.#mode;\r\n    }\r\n    set mode(val) {\r\n      this.#mode = val;\r\n    }\r\n    /**\r\n     * 3D mode only. This is to specify the number of vertices that makes up the\r\n     * perimeter of the arc. Default value is 25. Won't draw a stroke for a detail\r\n     * of more than 50. (on 3D canvas only)\r\n     * @type {number}\r\n     */\r\n    get detail() {\r\n      return this.#detail;\r\n    }\r\n    set detail(val) {\r\n      this.#detail = val;\r\n    }\r\n  };\r\n/**\r\n * Draws an arc to the screen.\r\n * The origin may be changed with the ellipse_mode property.\r\n *\r\n * The arc is always drawn clockwise from wherever start falls to wherever\r\n * stop falls on the ellipse. Adding or subtracting TWO_PI to either angle\r\n * does not change where they fall. If both start and stop fall at the same\r\n * place, a full ellipse will be drawn. Be aware that the y-axis increases in\r\n * the downward direction, therefore angles are measured clockwise from the\r\n * positive x-direction (\"3 o'clock\").\r\n * @element arc\r\n */\r\nclass Arc extends addXY(\r\n  addWidthHeight(addArcProps(add2DFillStroke(RenderedElement)))\r\n) {}\r\ncustomElements.define(\"p-arc\", Arc);\r\n/**\r\n * Draws an ellipse (oval) to the screen. If no height is specified, the\r\n * value of width is used for both the width and height. If a\r\n * negative height or width is specified, the absolute value is taken.\r\n *\r\n * An ellipse with equal width and height is a circle. The origin may be\r\n * changed with the ellipseMode() function.\r\n * @element ellipse\r\n */\r\nclass Ellipse extends addXY(addWidthHeight(addFillStroke(RenderedElement))) {\r\n  constructor() {\r\n    super([\"x, y, width, [height]\", \"x, y, width, height, [detail]\"]);\r\n  }\r\n  collider = p5.prototype.collider_type.ellipse;\r\n  get collision_args() {\r\n    const originalPoint = new DOMPoint(\r\n      this.this_element.x,\r\n      this.this_element.y\r\n    );\r\n    const { x, y } = this.pInst._transform_point_matrix(\r\n      originalPoint,\r\n      this.transform_matrix\r\n    );\r\n    const { pixel_density } = this.pInst;\r\n    const { w } = this.width * pixel_density;\r\n    const { h } = this.height * pixel_density || w;\r\n    return [x, y, w, h];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    const { x, y, width, height } = this.this_element;\r\n    return this.pInst.collide_point_ellipse(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    );\r\n  }\r\n}\r\ncustomElements.define(\"p-ellipse\", Ellipse);\r\n/**\r\n * Draws a circle to the screen. A circle is a simple closed shape. It is the\r\n * set of all points in a plane that are at a given distance from a given\r\n * point, the center.\r\n * @element circle\r\n */\r\nclass Circle extends addXY(add2DFillStroke(RenderedElement)) {\r\n  constructor() {\r\n    super([\"x, y, d\"]);\r\n  }\r\n  collider = p5.prototype.collider_type.circle;\r\n  get collision_args() {\r\n    const originalPoint = new DOMPoint(this.x, this.y);\r\n    const { x, y } = this.pInst._transform_point_matrix(\r\n      originalPoint,\r\n      this.transform_matrix\r\n    );\r\n    const d = this.this_element.d * this.pInst.pow(this.pInst.pixel_density, 2);\r\n    return [x, y, d];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    const { x, y, d } = this.this_element;\r\n    return this.pInst.collide_point_circle(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x,\r\n      y,\r\n      d\r\n    );\r\n  }\r\n}\r\ncustomElements.define(\"p-circle\", Circle);\r\n/**\r\n * Draws a line (a direct path between two points) to the screen. This width\r\n * can be modified by using the stroke_weight attribute. A line cannot be\r\n * filled, therefore the fill_color attribute will not affect the color of a\r\n * line. So to color a line, use the stroke attribute.\r\n * @element line\r\n */\r\nclass Line extends addXYZ12(add2DStroke(RenderedElement)) {\r\n  constructor() {\r\n    super([\"x1, y1, x2, y2\", \"x1, y1, z1, x2, y2, z2\"]);\r\n  }\r\n  collider = p5.prototype.collider_type.line;\r\n  get collision_args() {\r\n    const originalStart = new DOMPoint(\r\n      this.this_element.x1,\r\n      this.this_element.y1\r\n    );\r\n    const { x: x1, y: y1 } = this.pInst._transform_point_matrix(\r\n      originalStart,\r\n      this.transform_matrix\r\n    );\r\n    const originalEnd = new DOMPoint(\r\n      this.this_element.x2,\r\n      this.this_element.y2\r\n    );\r\n    const { x: x2, y: y2 } = this.pInst._transform_point_matrix(\r\n      originalEnd,\r\n      this.transform_matrix\r\n    );\r\n    return [x1, y1, x2, y2];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    const { x1, y1, x2, y2 } = this.this_element;\r\n    return this.pInst.collide_point_line(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x1,\r\n      y1,\r\n      x2,\r\n      y2\r\n    );\r\n  }\r\n}\r\ncustomElements.define(\"p-line\", Line);\r\n/**\r\n * Draws a point, a coordinate in space at the dimension of one pixel. The\r\n * color of the point is changed with the stroke attribute. The size of\r\n * the point can be changed with the stroke_weight attribute.\r\n * @element point\r\n */\r\nclass Point extends addXYZ(add2DStroke(RenderedElement)) {\r\n  constructor() {\r\n    super([\"x, y, [z]\"]);\r\n  }\r\n  collider = p5.prototype.collider_type.circle;\r\n  get collision_args() {\r\n    const originalPoint = new DOMPoint(this.x, this.y);\r\n    const { x, y } = this.pInst._transform_point_matrix(\r\n      originalPoint,\r\n      this.transform_matrix\r\n    );\r\n    const { stroke_weight } = this;\r\n    const { pixel_density } = this.pInst;\r\n    const d = stroke_weight * this.pInst.pow(pixel_density, 2);\r\n    return [x, y, d];\r\n  }\r\n  get mouse_over() {\r\n    const {\r\n      x,\r\n      y,\r\n      stroke_weight,\r\n      pixel_density,\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n    } = this;\r\n    const d = stroke_weight * this.pInst.pow(pixel_density, 2);\r\n    return this.pInst.collide_point_circle(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x,\r\n      y,\r\n      d\r\n    );\r\n  }\r\n}\r\ncustomElements.define(\"p-point\", Point);\r\n/**\r\n * Draws a quad on the canvas. A quad is a quadrilateral, a four-sided\r\n * polygon. It is similar to a rectangle, but the angles between its edges\r\n * are not constrained to ninety degrees. The x1 and y1 attributes set the\r\n * first vertex and the subsequent pairs should proceed clockwise or\r\n * counter-clockwise around the defined shape. z attributes only work when\r\n * quad() is used in WEBGL mode.\r\n * @element quad\r\n */\r\nclass Quad extends addXYZ1234(add2DFillStroke(RenderedElement)) {\r\n  constructor() {\r\n    super([\r\n      \"x1, y1, x2, y2, x3, y3, x4, y4, [detail_x], [detail_y]\",\r\n      \"x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, [detail_x], [detail_y]\",\r\n    ]);\r\n  }\r\n  collider = p5.prototype.collider_type.poly;\r\n  get collision_args() {\r\n    return [this.vertices.map(transformVertexFn(this))];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    return this.pInst.collide_point_poly(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      this.vertices\r\n    );\r\n  }\r\n  get vertices() {\r\n    const { x1, y1, x2, y2, x3, y3, x4, y4 } = this;\r\n    return [\r\n      this.pInst.createVector(x1, y1),\r\n      this.pInst.createVector(x2, y2),\r\n      this.pInst.createVector(x3, y3),\r\n      this.pInst.createVector(x4, y4),\r\n    ];\r\n  }\r\n}\r\ncustomElements.define(\"p-quad\", Quad);\r\n/**\r\n * Draws a rectangle on the canvas. A rectangle is a four-sided closed shape\r\n * with every angle at ninety degrees. By default, the x and y attributes\r\n * set the location of the upper-left corner, w sets the width, and h sets\r\n * the height. The way these attributes are interpreted may be changed with\r\n * the rect_mode attribute.\r\n *\r\n * The tl, tr, br and bl attributes, if specified, determine\r\n * corner radius for the top-left, top-right, lower-right and lower-left\r\n * corners, respectively. An omitted corner radius parameter is set to the\r\n * value of the previously specified radius value in the attribute list.\r\n * @element rect\r\n */\r\nclass Rect extends addXY(\r\n  addWidthHeight(addRectMode(add2DFillStroke(RenderedElement)))\r\n) {\r\n  constructor() {\r\n    super([\r\n      \"x, y, width, [h], [tl], [tr], [br], [bl]\",\r\n      \"x, y, width, height, [detail_x], [detail_y]\",\r\n    ]);\r\n  }\r\n  collider = p5.prototype.collider_type.rect;\r\n  get collision_args() {\r\n    const originalPoint = new DOMPoint(this.x, this.y);\r\n    const { x, y } = this.pInst._transform_point_matrix(\r\n      originalPoint,\r\n      this.transform_matrix\r\n    );\r\n    const { pixel_density } = this.pInst;\r\n    const w = this.width * this.pInst.pow(pixel_density, 2);\r\n    const h = this.height * this.pInst.pow(pixel_density, 2);\r\n    return [x, y, w, h];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    const { x, y, width, height } = this;\r\n    return this.pInst.collide_point_rect(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    );\r\n  }\r\n}\r\ncustomElements.define(\"p-rect\", Rect);\r\n/**\r\n * Draws a square to the screen. A square is a four-sided shape with every\r\n * angle at ninety degrees, and equal side size. This element is a special\r\n * case of the rect element, where the width and height are the same, and the\r\n * attribute is called \"s\" for side size. By default, the x and y attributes\r\n * set the location of the upper-left corner, and s sets the side size of the\r\n * square. The way these attributes are interpreted, may be changed with the\r\n * rect_mode attribute.\r\n *\r\n * The tl, tr, br, and bl attributes, if specified, determine corner radius\r\n * for the top-left, top-right, lower-right and lower-left corners,\r\n * respectively. An omitted corner radius attribute is set to the value of\r\n * the previously specified radius value in the attribute list.\r\n *\r\n * @element square\r\n */\r\nclass Square extends addXY(addRectMode(add2DFillStroke(RenderedElement))) {\r\n  #size;\r\n  constructor() {\r\n    super([\"x, y, size, [tl], [tr], [br], [bl]\"]);\r\n  }\r\n  collider = p5.prototype.collider_type.rect;\r\n  get collision_args() {\r\n    const originalPoint = new DOMPoint(this.x, this.y);\r\n    const { x, y } = this.pInst._transform_point_matrix(\r\n      originalPoint,\r\n      this.transform_matrix\r\n    );\r\n    const { pixel_density } = this.pInst;\r\n    const { size } = this;\r\n    const w = size * this.pInst.pow(pixel_density, 2);\r\n    const h = w;\r\n    return [x, y, w, h];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    const { x, y, s } = this;\r\n    return this.pInst.collide_point_rect(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x,\r\n      y,\r\n      s,\r\n      s\r\n    );\r\n  }\r\n  /**\r\n   * The side size of the square\r\n   * @type {number}\r\n   */\r\n  get size() {\r\n    return this.#size;\r\n  }\r\n  set size(val) {\r\n    if (!isNaN(val)) this.#size = Number(val);\r\n    else\r\n      console.error(\r\n        `${this.tagName}'s size is being set to ${val}, but it may only be set to a number.`\r\n      );\r\n  }\r\n}\r\ncustomElements.define(\"p-square\", Square);\r\n/**\r\n * Draws a triangle to the canvas. A triangle is a plane created by connecting\r\n * three points. x1 and y1 specify the first point, x2 and y2 specify the\r\n * second point, and x3 and y3 specify the\r\n * third point.\r\n * @element triangle\r\n */\r\nclass Triangle extends addXY123(add2DFillStroke(RenderedElement)) {\r\n  constructor() {\r\n    const overloads = [\"x1, y1, x2, y2, x3, y3\"];\r\n    super(overloads);\r\n  }\r\n  collider = p5.prototype.collider_type.poly;\r\n  get collision_args() {\r\n    return [this.vertices.map(transformVertexFn(this))];\r\n  }\r\n  get mouse_over() {\r\n    const { mouse_trans_pos_x, mouse_trans_pos_y } = this.pInst;\r\n    const { x1, y1, x2, y2, x3, y3 } = this;\r\n    return this.pInst.collide_point_triangle(\r\n      mouse_trans_pos_x,\r\n      mouse_trans_pos_y,\r\n      x1,\r\n      y1,\r\n      x2,\r\n      y2,\r\n      x3,\r\n      y3\r\n    );\r\n  }\r\n  get vertices() {\r\n    const { x1, y1, x2, y2, x3, y3 } = this;\r\n    return [\r\n      this.pInst.createVector(x1, y1),\r\n      this.pInst.createVector(x2, y2),\r\n      this.pInst.createVector(x3, y3),\r\n    ];\r\n  }\r\n}\r\ncustomElements.define(\"p-triangle\", Triangle);\r\n\r\n/**\r\n * Draws a cubic Bezier curve on the screen. These curves are defined by a\r\n * series of anchor and control points. x1 and y1 specify\r\n * the first anchor point and x4 and y4 specify the other\r\n * anchor point, which become the first and last points on the curve. (x2, y2)\r\n * and (x3, y3) specify the two control points which define the shape\r\n * of the curve. Approximately speaking, control points \"pull\" the curve\r\n * towards them.\r\n *\r\n * Bezier curves were developed by French automotive engineer Pierre Bezier,\r\n * and are commonly used in computer graphics to define gently sloping curves.\r\n * ```<curve>``` element.\r\n * @element bezier\r\n */\r\nclass Bezier extends addXYZ1234(add2DFillStroke(RenderedElement)) {\r\n  constructor() {\r\n    super([\r\n      \"x1, y1, x2, y2, x3, y3, x4, y4\",\r\n      \"x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-bezier\", Bezier);\r\nclass Curve extends addXYZ1234(add2DFillStroke(RenderedElement)) {\r\n  constructor() {\r\n    super([\r\n      \"x1, y1, x2, y2, x3, y3, x4, y4\",\r\n      \"x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-curve\", Curve);\r\nclass Contour extends add2DFillStroke(RenderedElement) {\r\n  constructor() {\r\n    super([\"\"], \"beginContour\");\r\n  }\r\n  endRender() {\r\n    this.pInst.endContour();\r\n  }\r\n}\r\ncustomElements.define(\"p-contour\", Contour);\r\nclass Shape extends add2DFillStroke(RenderedElement) {\r\n  constructor() {\r\n    super([\"[kind]\"], \"beginShape\");\r\n  }\r\n  collider = p5.prototype.collider_type.poly;\r\n  get collision_args() {\r\n    return [this.vertices.map(transformVertexFn(this))];\r\n  }\r\n  endRender(assigned) {\r\n    if (assigned.hasOwnProperty(\"mode\")) this.pInst.endShape(assigned.mode);\r\n    else this.pInst.endShape();\r\n  }\r\n  get vertices() {\r\n    const arrayFromChildren = (el) => {\r\n      const ca = Array.from(el.children);\r\n      return ca.concat(ca.map(arrayFromChildren)).flat();\r\n    };\r\n    const childArray = arrayFromChildren(this);\r\n    const vertexChildren = childArray.filter(\r\n      (el) => el instanceof Vertex && el.this_element\r\n    );\r\n    const vertices = vertexChildren.map((el) => {\r\n      if (el instanceof QuadraticVertex) {\r\n        const { x3, y3 } = el;\r\n        return this.pInst.createVector(x3, y3);\r\n      }\r\n      const { x, y } = el;\r\n      return this.pInst.createVector(x, y);\r\n    });\r\n    return vertices.concat(vertices.slice(0));\r\n  }\r\n}\r\ncustomElements.define(\"p-shape\", Shape);\r\nclass Vertex extends addXYZ(RenderedElement) {\r\n  constructor() {\r\n    super([\"x, y, [z], [u], [v]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-vertex\", Vertex);\r\n\r\nclass QuadraticVertex extends RenderedElement {\r\n  constructor() {\r\n    super([\"cx, cy, x3, y3\", \"cx, cy, cz, x3, y3, z3\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-quadratic-vertex\", QuadraticVertex);\r\nclass CurveVertex extends addXYZ(RenderedElement) {\r\n  constructor() {\r\n    super([\"x, y\", \"x, y, [z]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-curve-vertex\", CurveVertex);\r\n","import { defineProperties, wrapMethod } from \"../utils/p5Modifiers\";\n\np5.prototype.window_resized = false;\nwrapMethod(\n  \"_onresize\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"window_resized\", true);\n    }\n);\n\np5.prototype.registerMethod(\"post\", function () {\n  this._setProperty(\"window_resized\", false);\n});\n\np5.prototype._fullscreen = p5.prototype.fullscreen;\np5.prototype._width = p5.prototype.width;\np5.prototype._height = p5.prototype.height;\n\np5.prototype._createDescriptionContainer = function () {\n  const cnvId = this.canvas.id;\n  const descriptionContainer = document.createElement(\"div\");\n  descriptionContainer.setAttribute(\"id\", `${cnvId}_Description`);\n  descriptionContainer.setAttribute(\"role\", \"region\");\n  descriptionContainer.setAttribute(\"aria-label\", \"Canvas Description\");\n  const p = document.createElement(\"p\");\n  p.setAttribute(\"id\", `${cnvId}_fallbackDesc`);\n  descriptionContainer.append(p);\n  this.canvas.append(descriptionContainer);\n  return descriptionContainer;\n};\nconst fallbackDescId = \"_fallbackDesc\";\nwrapMethod(\n  \"_describeHTML\",\n  (base) =>\n    function (type, text) {\n      const cnvId = this.canvas.id;\n      const describeId = `#${cnvId}_Description`;\n      if (type === \"fallback\") {\n        if (!this.dummyDOM.querySelector(describeId)) {\n          const fallback = this._createDescriptionContainer().querySelector(\n            `#${cnvId}_fallbackDesc`\n          );\n          fallback.innerHTML = text;\n        } else {\n          base.call(this, type, text);\n        }\n        //if the container for the description exists\n        this.descriptions.fallback = this.dummyDOM.querySelector(\n          `#${cnvId}${fallbackDescId}`\n        );\n        this.descriptions.fallback.innerHTML = text;\n      }\n    }\n);\n\nwrapMethod(\n  \"_describeElementHTML\",\n  (base) =>\n    function (type, name, text) {\n      const cnvId = this.canvas.id;\n      if (\n        type === \"fallback\" &&\n        !this.dummyDOM.querySelector(`#${cnvId}_Description`)\n      ) {\n        this._createDescriptionContainer();\n      }\n      base.call(this, type, name, text);\n    }\n);\n\nwrapMethod(\n  \"_createOutput\",\n  (base) =>\n    function (type, display) {\n      const cnvId = this.canvas.id;\n      if (!this.dummyDOM) {\n        this.dummyDOM = document.getElementById(cnvId).parentNode;\n      }\n      if (\n        (type === \"textOutput\" || type === \"gridOutput\") &&\n        !this.dummyDOM.querySelector(`#${cnvId}accessibleOutput${display}`)\n      )\n        this._createDescriptionContainer();\n      base.call(this, type, display);\n    }\n);\n\np5.prototype.registerMethod(\"post\", function () {\n  if (this.text_output || this.grid_output) this._updateAccsOutput();\n});\n\ndefineProperties({\n  frame_rate: {\n    get: function () {\n      return this._frameRate;\n    },\n    set: function (val) {\n      this.frameRate(val);\n    },\n  },\n  fullscreen: {\n    get: function () {\n      return this._fullscreen();\n    },\n    set: function (val) {\n      this._fullscreen(val);\n    },\n  },\n  window_width: {\n    get: function () {\n      return this.windowWidth;\n    },\n  },\n  window_height: {\n    get: function () {\n      return this.windowHeight;\n    },\n  },\n  grid_output: {\n    get: function () {\n      return this._accessibleOutputs.grid;\n    },\n    set: function (val) {\n      if (val === true) this.gridOutput();\n      else this.gridOutput(val);\n    },\n  },\n  pixel_density: {\n    get: function () {\n      return this.pixelDensity();\n    },\n    set: function (val) {\n      this.pixelDensity(val);\n    },\n  },\n  description: {\n    set: function (val) {\n      this.describeElement(...val);\n    },\n  },\n  display_density: {\n    get: function () {\n      return this.displayDensity();\n    },\n  },\n  url: {\n    get: function () {\n      return this.getURL();\n    },\n  },\n  url_path: {\n    get: function () {\n      return this.getURLPath();\n    },\n  },\n  url_params: {\n    get: function () {\n      return this.getURLParams();\n    },\n  },\n  log: {\n    set: function (val) {\n      this.print(val);\n    },\n  },\n  text_output: {\n    get: function () {\n      return this._accessibleOutputs.text;\n    },\n    set: function (val) {\n      if (val === true) this.textOutput();\n      else this.textOutput(val);\n    },\n  },\n});\n","import { RenderedElement } from \"../core\";\nimport { addStroke } from \"../properties/color_props\";\n\n/**\n * Clears the pixels within a buffer. This element only clears the canvas.\n * It will not clear objects created by create_x() functions such as\n * create_video() or create_div().\n * Unlike the main graphics context, pixels in additional graphics areas created\n * with create_graphics() can be entirely\n * or partially transparent. This element clears everything to make all of\n * the pixels 100% transparent.\n *\n * Note: In WebGL mode, this element can have attributes set to normalized RGBA\n * color values in order to clear the screen to a specific color.\n * In addition to color, it will also clear the depth buffer.\n * If you are not using the webGL renderer these color values will have no\n * effect.\n *\n * @element clear\n * @attribute {Number} r normalized red val.\n * @attribute {Number} g normalized green val.\n * @attribute {Number} b normalized blue val.\n * @attribute {Number} a normalized alpha val.\n */\nclass Clear extends RenderedElement {\n  constructor() {\n    super([\"\", \"r, g, b, a\"]);\n  }\n}\ncustomElements.define(\"p-clear\", Clear);\n\n/**\n * The ```<paint-bucket>``` element fills the canvas with a particular color or\n * image.\n *\n * @element paint-bucket\n * @attribute {p5.Color} color  any value created by the <a href=\"#/p5/color\">color\n * @attribute {String} colorstring color string, possible formats include: integer\n *                         rgb() or rgba(), percentage rgb() or rgba(),\n *                         3-digit hex, 6-digit hex\n * @attribute {Number} [a]         opacity of the background relative to current\n *                             color range (default is 0-255)\n * @attribute {Number} gray   specifies a value between white and black\n * @attribute {Number} v1     red or hue value (depending on the current color\n *                        mode)\n * @attribute {Number} v2     green or saturation value (depending on the current\n *                        color mode)\n * @attribute {Number} v3     blue or brightness value (depending on the current\n *                        color mode)\n * @attribute  {Number[]}      values  an array containing the red, green, blue\n *                                 and alpha components of the color\n * @attribute {p5.Image} image    image loaded via an ```<asset>``` (must be\n *                                  same size as the sketch window)\n */\nclass PaintBucket extends RenderedElement {\n  constructor() {\n    super(\n      [\"c\", \"colorstring, [a]\", \"gray, [a]\", \"v1, v2, v3, [a]\"],\n      \"background\"\n    );\n  }\n}\ncustomElements.define(\"p-paint-bucket\", PaintBucket);\n","import { P5Element } from \"../core\";\r\n/**\r\n * This HTML element loads an XML sketch file. This should be added to the\r\n * index.html file as a `<link>` element with the attributes is=\"p-sketch\" and\r\n * href=\"[PATH TO XML FILE]\".\r\n * @element p-sketch\r\n * @example Add a sketch to html\r\n * ```html\r\n * <!DOCTYPE html>\r\n * <html lang=\"en\">\r\n * <head>\r\n *   <script src=\"p5.js\"></script>\r\n *   <script src=\"p5.marker.js\" defer></script>\r\n *   <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\r\n *   <link href=\"sketch.xml\" is=\"p-sketch\" />\r\n *   <meta charset=\"utf-8\" />\r\n * </head>\r\n * <body></body>\r\n * </html>\r\n * ```\r\n */\r\nclass Sketch extends HTMLLinkElement {\r\n  static elementName = \"p-sketch\";\r\n  constructor() {\r\n    super();\r\n    this.#loadXML(this.href);\r\n  }\r\n  #convertElement(xmlEl) {\r\n    const xmlTag = xmlEl.tagName;\r\n    const createElementArguments = this.#xmlTagToCreateElementArguments(xmlTag);\r\n    const pEl = document.createElement(...createElementArguments);\r\n    this.#copyAttributes(xmlEl, pEl);\r\n    if (xmlTag === \"custom\") pEl.define();\r\n    return pEl;\r\n  }\r\n  #convertAllElements(xmlEl, parent = document.body) {\r\n    const pEl = this.#convertElement(xmlEl);\r\n    parent.appendChild(pEl);\r\n    for (let i = 0; i < xmlEl.children.length; i++) {\r\n      this.#convertAllElements(xmlEl.children[i], pEl);\r\n    }\r\n  }\r\n  #convertXML(e) {\r\n    const xml = e.target.response.documentElement;\r\n    this.#convertAllElements(xml);\r\n    document.querySelectorAll(\"canvas\").forEach((canvas) => canvas.runCode());\r\n  }\r\n  #copyAttributes(orig, copy) {\r\n    const attrs = orig.attributes;\r\n    for (let i = 0; i < attrs.length; i++) {\r\n      const attr = attrs[i];\r\n      copy.setAttribute(attr.name, attr.value);\r\n    }\r\n  }\r\n  #loadXML(path) {\r\n    if (!path)\r\n      return console.error(\r\n        \"p-sketch element is missing required path attribute\"\r\n      );\r\n    const request = new XMLHttpRequest();\r\n    request.open(\"GET\", path);\r\n    request.responseType = \"document\";\r\n    request.overrideMimeType(\"text/xml\");\r\n    request.addEventListener(\"load\", this.#convertXML.bind(this));\r\n    request.send();\r\n  }\r\n  #xmlTagToCreateElementArguments(xmlTag) {\r\n    if (xmlTag.slice(0, 2) === \"p-\") return [xmlTag];\r\n    if (xmlTag === \"canvas\") return [xmlTag, { is: \"p-canvas\" }];\r\n    if (xmlTag === \"canvas-3d\") return [\"canvas\", { is: \"p-canvas-3d\" }];\r\n    return [\"p-\" + xmlTag];\r\n  }\r\n}\r\ncustomElements.define(\"p-sketch\", Sketch, { extends: \"link\" });\r\n/**\r\n * The `<custom>` element generates a new element from a combination of existing\r\n * elements. This element should be placed outside the <canvas> element. The name attribute defines the name of the new element. For\r\n * example, if name is set to \"my-element,\" <my-element>\r\n * @element custom\r\n * @example Clouds\r\n * ```html\r\n * <_>\r\n *  <custom name=\"cloud\" attributes=\"center_x, center_y\" stroke=\"NONE\">\r\n *      <_ anchor=\"center_x, center_y\" d=\"40\">\r\n *          <circle x=\"-20\" y=\"-10\" fill_color=\"220\"></circle>\r\n *          <circle x=\"20\" y=\"-10\" fill_color=\"210\"></circle>\r\n *          <circle x=\"-10\" y=\"-20\" fill_color=\"250\"></circle>\r\n *          <circle x=\"10\" y=\"-20\" fill_color=\"210\"></circle>\r\n *          <circle x=\"0\" y=\"0\" fill_color=\"180\"></circle>\r\n *          <circle x=\"20\" y=\"0\" fill_color=\"200\"></circle>\r\n *          <circle x=\"-20\" y=\"0\" fill_color=\"240\"></circle>\r\n *          <circle x=\"0\" y=\"-5\" fill_color=\"235\"></circle>\r\n *      </_>\r\n *  </custom>\r\n *  <canvas\r\n *      width=\"400\"\r\n *      height=\"400\"\r\n *      is=\"canvas\"\r\n *      canvas_background=\"100, 140, 200\"\r\n *      cloud_x=\"0\"\r\n *  >\r\n *      <cloud\r\n *          center_y=\"75\"\r\n *          center_x=\"cloud_x - 40 - width * 0.25\"\r\n *          change=\"center_x: center_x + width * 0.25\"\r\n *          repeat=\"WHILE center_x LESS_THAN width * 1.25\"\r\n *      ></cloud>\r\n *      <_ cloud_x=\"cloud_x + 0.25\">\r\n *          <_ on=\"cloud_x GREATER_THAN width * 0.25\" cloud_x=\"0\"></_>\r\n *      </_>\r\n *  </canvas>\r\n * </_>\r\n * ```\r\n */\r\nclass Custom extends P5Element {\r\n  constructor() {\r\n    super();\r\n    if (this.attributes.length) this.define(this);\r\n  }\r\n  /**\r\n   * Defines the custom element created by this element.\r\n   */\r\n  define() {\r\n    const pCustomEl = this;\r\n    const name = pCustomEl.getAttribute(\"name\");\r\n    //  Trick custom-elements-manifest into ignoring this\r\n    customElements[\"define\"](\r\n      `p-${name}`,\r\n      class extends P5Element {\r\n        constructor() {\r\n          super();\r\n        }\r\n        /**\r\n         * Sets the default values for this element's attributes.\r\n         */\r\n        setDefaults() {\r\n          Array.from(pCustomEl.attributes).forEach(\r\n            (a) =>\r\n              this.hasAttribute(a.name) === false &&\r\n              this.setAttribute(a.name, a.value)\r\n          );\r\n          const childClones = Array.from(pCustomEl.children).map((child) =>\r\n            child.cloneNode(true)\r\n          );\r\n          this.prepend(...childClones);\r\n        }\r\n        renderToCanvas = null;\r\n      }\r\n    );\r\n  }\r\n}\r\ncustomElements.define(\"p-custom\", Custom);\r\n\r\nclass Asset extends HTMLElement {\r\n  static elementName = \"p-asset\";\r\n  constructor() {\r\n    super();\r\n  }\r\n  static loadFns = {\r\n    image: \"loadImage\",\r\n    font: \"loadFont\",\r\n    json: \"loadJSON\",\r\n    strings: \"loadStrings\",\r\n    table: \"loadTable\",\r\n    xml: \"loadXML\",\r\n    bytes: \"loadBytes\",\r\n    get: \"httpGet\",\r\n    shader: \"loadShader\",\r\n  };\r\n\r\n  async load(pInst) {\r\n    if (this.data) return this.data;\r\n    const loadFn = Asset.loadFns[this.getAttribute(\"type\").toLowerCase()];\r\n    const path = this.getAttribute(\"path\");\r\n    this.data = await pInst[loadFn](path);\r\n    return this.data;\r\n  }\r\n}\r\ncustomElements.define(\"p-asset\", Asset);\r\n","import { defineRendererGetterSetters } from \"../utils/p5Modifiers\";\n\nconst pointTangentOverload = (fn) =>\n  function () {\n    const args = arguments;\n    if (args.length !== 9) return fn(...args);\n    return this.createVector(\n      fn(args[0], args[2], args[4], args[6], args[8]),\n      fn(args[1], args[3], args[5], args[7], args[8])\n    );\n  };\np5.prototype.bezierPoint = pointTangentOverload(p5.prototype.bezierPoint);\np5.prototype.bezierTangent = pointTangentOverload(p5.prototype.bezierTangent);\np5.prototype.curvePoint = pointTangentOverload(p5.prototype.curvePoint);\np5.prototype.curveTangent = pointTangentOverload(p5.prototype.curveTangent);\n\ndefineRendererGetterSetters(\"ellipseMode\", \"rectMode\", \"curveTightness\");\n","import { defineProperties } from \"../utils/p5Modifiers\";\n\ndefineProperties({\n  animate: {\n    get: function () {\n      return this.isLooping();\n    },\n    set: function (val) {\n      if (val) this.loop();\n      else this.noLoop();\n    },\n  },\n  remove_canvas: {\n    get: function () {\n      return false;\n    },\n    set: function () {\n      this.remove();\n    },\n  },\n});\n","import { defineSnakeAlias } from \"../utils/p5Modifiers\";\n\ndefineSnakeAlias(\n  \"selectAll\",\n  \"removeElements\",\n  \"createDiv\",\n  \"createP\",\n  \"createSpan\",\n  \"createImg\",\n  \"createA\",\n  \"createSlider\",\n  \"createButton\",\n  \"createCheckbox\",\n  \"createSelect\",\n  \"createRadio\",\n  \"createColorPicker\",\n  \"createInput\",\n  \"createFileInput\",\n  \"createVideo\",\n  \"createAudio\",\n  \"createCapture\",\n  \"createElement\"\n);\n","import { defineSnakeAlias } from \"../utils/p5Modifiers\";\n\ndefineSnakeAlias(\n  \"createStringDict\",\n  \"createNumberDict\",\n  \"matchAll\",\n  \"splitTokens\"\n);\np5.prototype.storage = {};\np5.prototype.registerMethod(\"init\", function () {\n  this._setProperty(\n    \"storage\",\n    new Proxy(this, {\n      get(target, prop) {\n        if (prop === \"clear\") return target.clearStorage;\n        if (prop === \"remove\") return target.removeItem;\n        return target.getItem(prop);\n      },\n      set(target, prop, val) {\n        target.storeItem(prop, val);\n        return true;\n      },\n    })\n  );\n});\n","import { defineProperties, defineSnakeAlias } from \"../utils/p5Modifiers\";\n\ndefineSnakeAlias(\"createVector\");\n\ndefineProperties({\n  angle_mode: {\n    get: function () {\n      return this._angleMode;\n    },\n    set: function (mode) {\n      this._setProperty(\"_angleMode\", mode);\n    },\n  },\n  noise_detail: {\n    set: function () {\n      this.noiseDetail(...arguments);\n    },\n  },\n  noise_seed: {\n    set: function () {\n      this.noiseSeed(...arguments);\n    },\n  },\n  random_seed: {\n    get: function () {\n      return this._lcg_random_state;\n    },\n    set: function () {\n      this.randomSeed(...arguments);\n    },\n  },\n});\n","import { defineSnakeAlias } from \"../utils/p5Modifiers\";\n\ndefineSnakeAlias(\"createCanvas\", \"createGraphics\");\n","import { defineProperties, wrapMethod } from \"../utils/p5Modifiers\";\n\nconst defaultAnchor = p5.prototype.createVector();\nconst defaultAngle = p5.prototype.createVector();\nconst defaultShear = p5.prototype.createVector();\nconst defaultScale = p5.prototype.createVector(1, 1, 1);\nconst wrap = function (renderer) {\n  function wrappedRenderer() {\n    renderer.apply(this, arguments);\n    this._anchorStack = [defaultAnchor.copy()];\n    this._angleStack = [defaultAngle.copy()];\n    this._scaleStack = [defaultScale.copy()];\n    this._shearStack = [defaultShear.copy()];\n  }\n  wrappedRenderer.prototype = Object.create(renderer.prototype);\n  return wrappedRenderer;\n};\np5.Renderer = wrap(p5.Renderer);\n\nwrapMethod(\n  \"push\",\n  (base) =>\n    function () {\n      this._renderer._anchorStack.push(defaultAnchor.copy());\n      this._renderer._angleStack.push(defaultAngle.copy());\n      this._renderer._scaleStack.push(defaultScale.copy());\n      this._renderer._shearStack.push(defaultShear.copy());\n      base.call(this);\n    }\n);\n\nwrapMethod(\n  \"pop\",\n  (base) =>\n    function () {\n      this._renderer._anchorStack.pop();\n      this._renderer._angleStack.pop();\n      this._renderer._scaleStack.pop();\n      this._renderer._shearStack.pop();\n      base.call(this);\n    }\n);\n\np5.prototype.RESET = \"reset\";\n\ndefineProperties({\n  anchor: {\n    get: function () {\n      return this._renderer?._anchorStack[\n        this._renderer._anchorStack.length - 1\n      ];\n    },\n    set: function (val) {\n      if (Array.isArray(val))\n        this._renderer._anchorStack[this._renderer._anchorStack.length - 1].set(\n          ...val\n        );\n      else\n        this._renderer._anchorStack[this._renderer._anchorStack.length - 1].set(\n          val\n        );\n      this.translate(this.anchor);\n    },\n  },\n  angle: {\n    get: function () {\n      return this._renderer?._angleStack.slice(-1)[0].z;\n    },\n    set: function (val) {\n      this._renderer._angleStack[this._renderer._anchorStack.length - 1].z =\n        val;\n      this.rotate(this.angle);\n    },\n  },\n  angle_x: {\n    get: function () {\n      return this._renderer?._angleStack.slice(-1)[0].x;\n    },\n    set: function (val) {\n      this._renderer._angleStack[this._renderer._angleStack.length - 1].x = val;\n      this.rotateX(this.angle_x);\n    },\n  },\n  angle_y: {\n    get: function () {\n      return this._renderer?._angleStack.slice(-1)[0].y;\n    },\n    set: function (val) {\n      this._renderer._angleStack[this._renderer._angleStack.length - 1].y = val;\n      this.rotateY(this.angle_y);\n    },\n  },\n  angle_z: {\n    get: function () {\n      return this._renderer?._angleStack.slice(-1)[0].z;\n    },\n    set: function (val) {\n      this._renderer._angleStack[this._renderer._angleStack.length - 1].z = val;\n      this.rotateZ(this.angle_z);\n    },\n  },\n  angle_vector: {\n    get: function () {\n      return this._renderer?._angleStack.slice(-1)[0];\n    },\n    set: function (val) {\n      this._renderer._angleStack[this._renderer._angleStack.length - 1] = val;\n      if (this._renderer.isP3D) {\n        this.rotateX(this.angle_x);\n        this.rotateY(this.angle_y);\n        this.rotateZ(this.angle_z);\n      } else this.rotate(this.angle);\n    },\n  },\n  scale_factor: {\n    get: function () {\n      return this._renderer?._scaleStack.slice(-1)[0];\n    },\n    set: function (val) {\n      if (Array.isArray(val))\n        this._renderer._scaleStack[this._renderer._scaleStack.length - 1].set(\n          ...val\n        );\n      else\n        this._renderer._scaleStack[this._renderer._scaleStack.length - 1].set(\n          val,\n          val,\n          val\n        );\n      this.scale(this.scale_factor);\n    },\n  },\n  shear: {\n    get: function () {\n      return this._renderer?._shearStack.slice(-1)[0];\n    },\n    set: function (val) {\n      if (Array.isArray(val))\n        this._renderer._shearStack[this._renderer._shearStack.length - 1].set(\n          ...val\n        );\n      else\n        this._renderer._shearStack[this._renderer._shearStack.length - 1].set(\n          val\n        );\n      this.shearX(this.shear.x);\n      this.shearY(this.shear.y);\n    },\n  },\n  transform_matrix: {\n    get: function () {\n      if (this._renderer.isP3D) return this._renderer.uMVMatrix;\n      return this.drawingContext?.getTransform();\n    },\n    set: function (val) {\n      if (val === this.RESET) this.resetMatrix();\n      else this.applyMatrix(val);\n    },\n  },\n});\n\nconst identityMatrix = new DOMMatrix([\n  1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n]);\n\np5.prototype._transform_point_matrix = function (originalPoint, transMatrix) {\n  const pixelDensityMatrix = new DOMMatrix(identityMatrix).scale(\n    this.pixel_density\n  );\n  const scaledMatrix = transMatrix.multiply(pixelDensityMatrix);\n  const transformedPoint = scaledMatrix.transformPoint(originalPoint);\n  return transformedPoint;\n};\n\np5.prototype.untransform_point = function (x, y, z) {\n  const originalPoint = new DOMPoint(x, y, z);\n  return this._transform_point_matrix(originalPoint, this.transform_matrix);\n};\n\np5.prototype.transform_point = function (x, y, z) {\n  const originalPoint = new DOMPoint(x, y, z);\n  return this._transform_point_matrix(\n    originalPoint,\n    this.transform_matrix.inverse()\n  );\n};\n","import {\n  defineProperties,\n  defineSnakeAlias,\n  wrapMethod,\n} from \"../utils/p5Modifiers\";\n\ndefineSnakeAlias(\"deviceOrientation\", \"turnAxis\", \"keyIsDown\");\n\n//  TODO - test on mobile device\np5.prototype.device_moved = false;\n\n//  TODO - test on mobile device\np5.prototype.device_turned = false;\n\np5.prototype.mouse_down = false;\n\np5.prototype.mouse_up = false;\n\np5.prototype.mouse_dragging = false;\n\np5.prototype.mouse_double_clicked = false;\n\np5.prototype._mouseWheel = 0;\n\np5.prototype.key_down = false;\n\np5.prototype.key_up = false;\n\n//  TODO - test on mobile device\np5.prototype.touch_started = false;\np5.prototype.touch_moved = false;\np5.prototype.touch_ended = false;\n\np5.prototype._startAngleZ;\nwrapMethod(\n  \"_handleMotion\",\n  (base) =>\n    function () {\n      base.call(this);\n      this._setProperty(\"deviced_moved\", true);\n    }\n);\n\nwrapMethod(\n  \"_onmousedown\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"mouse_down\", true);\n    }\n);\n\nwrapMethod(\n  \"_ondbclick\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"mouse_double_clicked\", true);\n    }\n);\n\nwrapMethod(\n  \"_onmousemove\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"mouse_dragging\", this.mouseIsPressed);\n      this._setProperty(\"touch_moved\", this.mouseIsPressed);\n    }\n);\n\nwrapMethod(\n  \"_onwheel\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"_mouseWheel\", this._mouseWheelDeltaY);\n    }\n);\n\nwrapMethod(\n  \"_onkeyup\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"key_up\", true);\n      this._setProperty(\"key_held\", false);\n    }\n);\n\nwrapMethod(\n  \"_onkeydown\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"key_down\", true);\n    }\n);\n\nwrapMethod(\n  \"_ontouchbase\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"touch_started\", true);\n    }\n);\n\nwrapMethod(\n  \"_ontouchmove\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"touch_moved\", true);\n    }\n);\n\nwrapMethod(\n  \"_ontouchend\",\n  (base) =>\n    function (e) {\n      base.call(this, e);\n      this._setProperty(\"touch_ended\", true);\n    }\n);\n\np5.prototype.registerMethod(\"pre\", function () {\n  this._setProperty(\n    \"mouse_up\",\n    this.mouseIsPressed == false && this.mouse_held == true\n  );\n  this._setProperty(\"mouse_held\", this.mouseIsPressed);\n  this._setProperty(\"key_held\", this.key_down);\n});\n\np5.prototype.registerMethod(\"post\", function () {\n  this._setProperty(\"device_moved\", false);\n  this._setProperty(\"mouse_down\", false);\n  this._setProperty(\"mouse_dragging\", false);\n  this._setProperty(\"mouse_double_clicked\", false);\n  this._setProperty(\"_mouseWheel\", false);\n  this._setProperty(\"key_up\", false);\n  this._setProperty(\"key_down\", false);\n  this._setProperty(\"touch_started\", false);\n  this._setProperty(\"touch_moved\", false);\n  this._setProperty(\"touch_ended\", false);\n});\n\n//  Create properties with default value\np5.prototype._moveThreshold = 0.5;\np5.prototype._shakeThreshold = 30;\n\ndefineProperties({\n  //  TODO - test on mobile device\n  device_acceleration: {\n    get: function () {\n      return this.createVector(\n        this.accelerationX,\n        this.accelerationY,\n        this.accelerationZ\n      );\n    },\n  },\n  //  TODO - test on mobile device\n  device_prev_acceleration: {\n    get: function () {\n      return this.createVector(\n        this.pAccelerationX,\n        this.pAccelerationY,\n        this.pAccelerationZ\n      );\n    },\n  },\n  //  TODO - test on mobile device\n  device_rotation: {\n    get: function () {\n      return this.createVector(this.rotationX, this.rotationY, this.rotationZ);\n    },\n  },\n  //  TODO - test on mobile device\n  device_prev_rotation: {\n    get: function () {\n      return this.createVector(\n        this.pRotationX,\n        this.pRotationY,\n        this.pRotationZ\n      );\n    },\n  },\n  //  TODO - test on mobile device\n  device_turned: {\n    get: function () {\n      if (\n        this.rotationX === null &&\n        this.rotationY === null &&\n        this.rotationZ === null\n      )\n        return false;\n      return (\n        this.rotationX !== this.pRotationX ||\n        this.rotationY !== this.pRotationY ||\n        this.rotationZ !== this.pRotationZ\n      );\n    },\n  },\n  first_frame: {\n    get: function () {\n      return this.frameCount === 1;\n    },\n  },\n  key_code: {\n    get: function () {\n      return this.keyCode;\n    },\n  },\n  mouse_button: {\n    get: function () {\n      return this.mouseButton;\n    },\n  },\n  mouse_pos: {\n    get: function () {\n      return this.createVector(this.mouseX, this.mouseY);\n    },\n  },\n  mouse_pos_x: {\n    get: function () {\n      return this.mouseX;\n    },\n  },\n  mouse_pos_y: {\n    get: function () {\n      return this.mouseY;\n    },\n  },\n  mouse_prev_pos: {\n    get: function () {\n      return this.createVector(this.pmouseX, this.pmouseY);\n    },\n  },\n  mouse_prev_pos_x: {\n    get: function () {\n      return this.pmouseX;\n    },\n  },\n  mouse_prev_pos_y: {\n    get: function () {\n      return this.pmouseY;\n    },\n  },\n  mouse_trans_pos: {\n    get: function () {\n      return this.transform_point(this.mouse_pos_x, this.mouse_pos_y);\n    },\n  },\n  mouse_trans_pos_x: {\n    get: function () {\n      return this.mouse_trans_pos.x;\n    },\n  },\n  mouse_trans_pos_y: {\n    get: function () {\n      return this.mouse_trans_pos.y;\n    },\n  },\n  mouse_wheel: {\n    get: function () {\n      return this._mouseWheel;\n    },\n  },\n  mouse_window_pos: {\n    get: function () {\n      return this.createVector(this.winMouseX, this.winMouseY);\n    },\n  },\n  mouse_window_pos_x: {\n    get: function () {\n      return this.winMouseX;\n    },\n  },\n  mouse_window_pos_y: {\n    get: function () {\n      return this.winMouseY;\n    },\n  },\n  mouse_prev_window_pos: {\n    get: function () {\n      return this.createVector(this.pwinMouseX, this.pwinMouseY);\n    },\n  },\n  mouse_window_prev_pos_x: {\n    get: function () {\n      return this.pwinMouseX;\n    },\n  },\n  mouse_window_prev_pos_y: {\n    get: function () {\n      return this.pwinMouseY;\n    },\n  },\n  move_threshold: {\n    get: function () {\n      return this._moveThreshold;\n    },\n    set: function (val) {\n      this.setMoveThreshold(val);\n    },\n  },\n  moved: {\n    get: function () {\n      return this.createVector(this.movedX, this.movedY);\n    },\n  },\n  moved_x: {\n    get: function () {\n      return this.movedX;\n    },\n  },\n  moved_y: {\n    get: function () {\n      return this.movedY;\n    },\n  },\n  pointer_lock_request: {\n    get: function () {\n      return document.pointerLockElement === this._curElement.elt;\n    },\n    set: function (val) {\n      if (val) this.requestPointerLock();\n      else this.exitPointerLock();\n    },\n  },\n  shake_threshold: {\n    get: function () {\n      return this._shakeThreshold;\n    },\n    set: function (val) {\n      this.setShakeThreshold(val);\n    },\n  },\n});\n","import {\n  defineProperties,\n  defineRendererGetterSetters,\n} from \"../utils/p5Modifiers\";\nimport { RenderedElement } from \"../core\";\nimport { addWidthHeight, addXY } from \"../properties/shape_props\";\n\n/**\n * Draw an image to the canvas.\n *\n * This element can be used with different numbers of attributes. The\n * simplest use requires only three attributes: img, x, and y—where (x, y) is\n * the position of the image. Two more attributes can optionally be added to\n * specify the width and height of the image.\n *\n * This element can also be used with eight Number attributes. To\n * differentiate between all these attributes, p5.js uses the language of\n * \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\n * image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n * \"source image\" dimensions can be useful when you want to display a\n * subsection of the source image instead of the whole thing.\n *\n * This element can also be used to draw images without distorting the original aspect ratio,\n * by adding 9th attribute, fit, which can either be COVER or CONTAIN.\n * CONTAIN, as the name suggests, contains the whole image within the specified destination box\n * without distorting the image ratio.\n * COVER covers the entire destination box.\n *\n *\n *\n * @element image\n * @attribute  {p5.Image|p5.Element|p5.Texture} img    the image to display\n * @attribute  {p5.Image|p5.Element|p5.Texture} img\n * @attribute  {Number}   dx     the x-coordinate of the destination\n *                           rectangle in which to draw the source image\n * @attribute  {Number}   dy     the y-coordinate of the destination\n *                           rectangle in which to draw the source image\n * @attribute  {Number}   dWidth  the width of the destination rectangle\n * @attribute  {Number}   dHeight the height of the destination rectangle\n * @attribute  {Number}   sx     the x-coordinate of the subsection of the source\n * image to draw into the destination rectangle\n * @attribute  {Number}   sy     the y-coordinate of the subsection of the source\n * image to draw into the destination rectangle\n * @attribute {Number}    [sWidth] the width of the subsection of the\n *                           source image to draw into the destination\n *                           rectangle\n * @attribute {Number}    [sHeight] the height of the subsection of the\n *                            source image to draw into the destination rectangle\n * @attribute {Constant} [fit] either CONTAIN or COVER\n * @attribute {Constant} [xAlign] either LEFT, RIGHT or CENTER default is CENTER\n * @attribute {Constant} [yAlign] either TOP, BOTTOM or CENTER default is CENTER\n */\nclass Image extends addXY(addWidthHeight(RenderedElement)) {\n  constructor() {\n    super([\n      \"img, x, y, [width], [height]\",\n      \"img, dx, dy, dWidth, dHeight, sx, sy, [sWidth], [sHeight]\",\n    ]);\n  }\n  /**\n   * Sets the fill value for displaying images. Images can be tinted to\n   * specified colors or made transparent by including an alpha value.\n   *\n   * To apply transparency to an image without affecting its color, use\n   * white as the tint color and specify an alpha value. For instance,\n   * tint(255, 128) will make an image 50% transparent (assuming the default\n   * alpha range of 0-255, which can be changed with color_mode.\n   *\n   * The value for the gray parameter must be less than or equal to the current\n   * maximum value as specified by color_mode. The default maximum value is\n   * 255.\n   *\n   * @type {p5.Color}\n   */\n  get tint() {\n    return this.pInst.color(this.pInst._renderer._tint);\n  }\n  set tint(val) {\n    if (val === this.pInst.NONE) this.pInst.noTint();\n    else this.pInst.tint(...arguments);\n  }\n}\ncustomElements.define(\"p-image\", Image);\n\ndefineRendererGetterSetters(\"imageMode\");\n\ndefineProperties({\n  canvas_pixels: {\n    get: function () {\n      this.loadPixels();\n      return this.pixels;\n    },\n    set: function (px) {\n      this.pixels = px;\n      this.updatePixels();\n    },\n  },\n});\n","import { defineProperties, defineSnakeAlias } from \"../utils/p5Modifiers\";\n\ndefineSnakeAlias(\"createWriter\");\n\ndefineProperties({\n  http_post: {\n    set: function () {\n      this.httpPost(...arguments);\n    },\n  },\n  http_do: {\n    set: function () {\n      this.httpDo(...arguments);\n    },\n  },\n  save_file: {\n    set: function () {\n      this.save(...arguments);\n    },\n  },\n  save_json_file: {\n    set: function () {\n      this.saveJSON(...arguments);\n    },\n  },\n  save_strings_file: {\n    set: function () {\n      this.saveStrings(...arguments);\n    },\n  },\n  save_table_file: {\n    set: function () {\n      this.saveTable(...arguments);\n    },\n  },\n});\n","import {\n  defineRendererGetterSetters,\n  defineSnakeAlias,\n} from \"../utils/p5Modifiers\";\nimport { RenderedElement } from \"../core\";\nimport { addFillStroke } from \"../properties/color_props\";\n\ndefineRendererGetterSetters(\n  \"textAlign\",\n  \"textLeading\",\n  \"textSize\",\n  \"textStyle\",\n  \"textWrap\",\n  \"textFont\"\n);\n\ndefineSnakeAlias(\"textAscent\", \"textDescent\");\n\nclass Text extends addFillStroke(RenderedElement) {\n  constructor() {\n    super([\"content, x, y, [x2], [y2]\"]);\n  }\n}\ncustomElements.define(\"p-text\", Text);\n","import { RenderedElement } from \"../core\";\r\nimport { addFillStroke } from \"../properties/color_props\";\r\n\r\np5.prototype.DEFAULT = \"default\";\r\np5.prototype.AMBIENT = \"ambient\";\r\np5.prototype.SPECULAR = \"specular\";\r\np5.prototype.EMISSIVE = \"emissive\";\r\n\r\nexport class WebGLGeometry extends addFillStroke(RenderedElement) {\r\n  #ambient_material;\r\n  #emissive_material;\r\n  #shininess;\r\n  #specular_material;\r\n  #no_lights;\r\n  /**\r\n   * Sets the ambient color of the material.\r\n   *\r\n   * The ambient_material color is the color the object will reflect\r\n   * under **any** lighting.\r\n   *\r\n   * Consider an ambient_material with the color yellow (255, 255, 0).\r\n   * If the light emits the color white (255, 255, 255), then the object\r\n   * will appear yellow as it will reflect the red and green components\r\n   * of the light. If the light emits the color red (255, 0, 0), then\r\n   * the object will appear red as it will reflect the red component\r\n   * of the light. If the light emits the color blue (0, 0, 255),\r\n   * then the object will appear black, as there is no component of\r\n   * the light that it can reflect.\r\n   * @type {p5.Color}\r\n   */\r\n  get ambient_material() {\r\n    return this.#ambient_material;\r\n  }\r\n  set ambient_material(val) {\r\n    if (Array.isArray(val)) this.pInst.ambientMaterial(...val);\r\n    else this.pInst.ambientMaterial(val);\r\n    this.#ambient_material = this.pInst.color(val);\r\n  }\r\n  /**\r\n   * Sets the emissive color of the material.\r\n   *\r\n   * An emissive material will display the emissive color at\r\n   * full strength regardless of lighting. This can give the\r\n   * appearance that the object is glowing.\r\n   *\r\n   * Note, \"emissive\" is a misnomer in the sense that the material\r\n   * does not actually emit light that will affect surrounding objects.\r\n   *\r\n   * @type {p5.Color}\r\n   */\r\n  get emissive_material() {\r\n    return this.#emissive_material;\r\n  }\r\n  set emissive_material(val) {\r\n    if (Array.isArray(val)) this.pInst.emissiveMaterial(...val);\r\n    else this.pInst.emissiveMaterial(val);\r\n    this.#ambient_material = this.pInst.color(val);\r\n  }\r\n  /**\r\n   * Sets the current material as a normal material.\r\n   *\r\n   * A normal material is not affected by light. It is often used as\r\n   * a placeholder material when debugging.\r\n   *\r\n   * Surfaces facing the X-axis become red, those facing the Y-axis\r\n   * become green, and those facing the Z-axis become blue.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  get normal_material() {\r\n    return this.pInst._renderer.useNormalMaterial;\r\n  }\r\n  set normal_material(val) {\r\n    if (val) this.pInst.normalMaterial();\r\n  }\r\n  /**\r\n   * Sets the <a href=\"#/p5.Shader\">p5.Shader</a> object to\r\n   * be used to render subsequent shapes.\r\n   *\r\n   * Custom shaders can be created using the\r\n   * create_shader() method and\r\n   * ```<shader>``` element.\r\n   *\r\n   * Set shader=\"DEFAULT\" to restore the default shaders.\r\n   *\r\n   * Note, shaders can only be used in WEBGL mode.\r\n   * @type {p5.Shader}\r\n   */\r\n  get shader() {\r\n    return [\r\n      this.pInst._renderer.userStrokeShader,\r\n      this.pInst._renderer.userFillShader,\r\n    ];\r\n  }\r\n  set shader(val) {\r\n    const { pInst } = this;\r\n    if (val === pInst.DEFAULT) pInst.resetShader();\r\n    else pInst.shader(val);\r\n  }\r\n  /**\r\n   * Sets the amount of gloss (\"shininess\") of a\r\n   * specular_material.\r\n   *\r\n   * The default and minimum value is 1.\r\n   * @type {number}\r\n   * */\r\n  get shininess() {\r\n    return this.#shininess;\r\n  }\r\n  set shininess(val) {\r\n    this.pInst.shininess(val);\r\n    this.#shininess = val;\r\n  }\r\n  /**\r\n   * Sets the specular color of the material.\r\n   *\r\n   * A specular material is reflective (shiny). The shininess can be\r\n   * controlled by the shininess property.\r\n   *\r\n   * Like ambient_material,\r\n   * the specular_material color is the color the object will reflect\r\n   * under ```<ambient-light>```.\r\n   * However unlike ambient_material, for all other types of lights\r\n   * ```<directional-light>```,\r\n   * ```<point-light>```,\r\n   * ```spot-light>```,\r\n   * a specular material will reflect the **color of the light source**.\r\n   * This is what gives it its \"shiny\" appearance.\r\n   *\r\n   * @type {p5.Color}\r\n   */\r\n  get specular_material() {\r\n    return this.#specular_material;\r\n  }\r\n  set specular_material(val) {\r\n    if (Array.isArray(val)) this.pInst.specularMaterial(...val);\r\n    else this.pInst.specularMaterial(val);\r\n    this.#specular_material = this.pInst.color(val);\r\n  }\r\n  /**\r\n   * Sets the texture that will be used to render subsequent shapes.\r\n   *\r\n   * A texture is like a \"skin\" that wraps around a 3D geometry. Currently\r\n   * supported textures are images, video, and offscreen renders.\r\n   *\r\n   * To texture a geometry created by a ```<shape>``` element,\r\n   * you will need to specify uv coordinates in ```<vertex>``` element.\r\n   *\r\n   * Note, texture can only be used in WEBGL mode.\r\n   *\r\n   * @type {p5.Image|p5.MediaElement|p5.Graphics|p5.Texture}\r\n   */\r\n  get texture() {\r\n    return this.pInst._renderer._tex;\r\n  }\r\n  set texture(val) {\r\n    this.pInst.texture(val);\r\n  }\r\n  /**\r\n   * Sets the coordinate space for texture mapping. The default mode is IMAGE\r\n   * which refers to the actual coordinates of the image.\r\n   * NORMAL refers to a normalized space of values ranging from 0 to 1.\r\n   *\r\n   * With IMAGE, if an image is 100×200 pixels, mapping the image onto the\r\n   * entire\r\n   * size of a quad would require the points (0,0) (100, 0) (100,200) (0,200).\r\n   * The same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1).\r\n   *\r\n   * @type {IMAGE|NORMAL}\r\n   */\r\n  get texture_mode() {\r\n    return this.pInst._renderer.textureMode;\r\n  }\r\n  set texture_mode(val) {\r\n    this.pInst.textureMode(val);\r\n  }\r\n  /**\r\n   * Sets the global texture wrapping mode. This controls how textures behave\r\n   * when their uv's go outside of the 0 to 1 range. There are three options:\r\n   * CLAMP, REPEAT, and MIRROR.\r\n   *\r\n   * CLAMP causes the pixels at the edge of the texture to extend to the bounds.\r\n   * REPEAT causes the texture to tile repeatedly until reaching the bounds.\r\n   * MIRROR works similarly to REPEAT but it flips the texture with every new tile.\r\n   *\r\n   * REPEAT & MIRROR are only available if the texture\r\n   * is a power of two size (128, 256, 512, 1024, etc.).\r\n   *\r\n   * This method will affect all textures in your sketch until another element\r\n   * sets texture_mode.\r\n   *\r\n   * If only one value is provided, it will be applied to both the\r\n   * horizontal and vertical axes.\r\n   * @type {[CLAMP|REPEAT|MIRROR, CLAMP|REPEAT|MIRROR]}\r\n   */\r\n  get texture_wrap() {\r\n    return [\r\n      this.pInst._renderer.textureWrapX,\r\n      this.pInst._renderer.textureWrapY,\r\n    ];\r\n  }\r\n  set texture_wrap(val) {\r\n    if (Array.isArray(val)) this.pInst.textureWrap(...val);\r\n    else this.pInst.textureWrap(val);\r\n  }\r\n  /**\r\n   * Removes all lights present in a sketch.\r\n   *\r\n   * All subsequent geometry is rendered without lighting (until a new\r\n   * light is created with a lighting element (\r\n   * ```<lights>```,\r\n   * ```<ambient-light>```,\r\n   * ```<directional-light>```,\r\n   * ```<point-light>```,\r\n   * ```<spot-light>```).\r\n   * @type {boolean}\r\n   */\r\n  get no_lights() {\r\n    return this.#no_lights;\r\n  }\r\n  set no_lights(val) {\r\n    this.#no_lights = val;\r\n    if (val == true) this.pInst.noLights();\r\n  }\r\n}\r\n\r\nexport class WebGLLight extends RenderedElement {\r\n  draw(inherited) {\r\n    //  Set no_lights to false so that children won't delete this light\r\n    super.draw({ ...inherited, ...{ no_lights: false } });\r\n  }\r\n}\r\n\r\nexport const addSpecularColor = (baseClass) =>\r\n  class extends baseClass {\r\n    #specular_color;\r\n    /**\r\n     * Sets the color of the specular highlight of a non-ambient light\r\n     * (i.e. all lights except ```<ambient-light>```).\r\n     *\r\n     * specular_color affects only the lights which are created by\r\n     * this element or its children\r\n     *\r\n     * This property is used in combination with\r\n     * <a href=\"#/p5/specularMaterial\">specularMaterial()</a>.\r\n     * If a geometry does not use specular_material, this property\r\n     * will have no effect.\r\n     *\r\n     * The default color is white (255, 255, 255), which is used if\r\n     * specular_color is not explicitly set.\r\n     *\r\n     * Note: specular_color is equivalent to the Processing function\r\n     * <a href=\"https://processing.org/reference/lightSpecular_.\r\n     * html\">lightSpecular</a>.\r\n     *\r\n     * @type {p5.Color}\r\n     */\r\n    get specular_color() {\r\n      return this.#specular_color;\r\n    }\r\n    set specular_color(val) {\r\n      const { pInst } = this;\r\n      const c = Array.isArray(val) ? pInst.color(...val) : pInst.color(val);\r\n      pInst.specularColor(c);\r\n      this.#specular_color = c;\r\n    }\r\n  };\r\n\r\nexport const addLightFalloff = (baseClass) =>\r\n  class extends baseClass {\r\n    #light_falloff;\r\n    /**\r\n     * Sets the falloff rate for ```<point-light>```\r\n     * and ```<spot-light>```.\r\n     *\r\n     * light_falloff affects only this element and its children.\r\n     *\r\n     * The values are `constant`, `linear`, an `quadratic` and are used to calculate falloff as follows:\r\n     *\r\n     * d = distance from light position to vertex position\r\n     *\r\n     * falloff = 1 / (CONSTANT + d \\* LINEAR + (d \\* d) \\* QUADRATIC)\r\n     * @type {[number, number, number]}\r\n     */\r\n    get light_falloff() {\r\n      return this.#light_falloff;\r\n    }\r\n    set light_falloff([constant, linear, quadratic]) {\r\n      const { pInst } = this;\r\n      pInst.lightFalloff(constant, linear, quadratic);\r\n      this.#light_falloff = [\r\n        pInst._renderer.constantAttenuation,\r\n        pInst._renderer.linearAttenuation,\r\n        pInst._renderer.quadraticAttenuation,\r\n      ];\r\n    }\r\n  };\r\n\r\nexport const addRectMode = (baseClass) =>\r\n  class extends baseClass {\r\n    #rect_mode;\r\n    /**\r\n     * Modifies the location from which rectangles are drawn by changing the way\r\n     * in which x and y coordinates are interpreted.\r\n     *\r\n     * The default mode is CORNER, which interprets the x and y as the\r\n     * upper-left corner of the shape.\r\n     *\r\n     * rect_mode=\"CORNERS\" interprets x and y as the location of\r\n     * one of the corners, and width and height as the location of\r\n     * the diagonally opposite corner. Note, the rectangle is drawn between the\r\n     * coordinates, so it is not necessary that the first corner be the upper left\r\n     * corner.\r\n     *\r\n     * rect_mode=\"CENTER\" interprets x and y as the shape's center\r\n     * point.\r\n     *\r\n     * rect_mode=\"RADIUS\" also uses x and y as the shape's\r\n     * center\r\n     * point, but uses width and height to specify half of the shape's\r\n     * width and height respectively.\r\n     *\r\n     * The value to this property must be written in ALL CAPS because they are\r\n     * predefined as constants in ALL CAPS.\r\n     *\r\n     * @type {CORNER|CORNERS|CENTER|RADIUS}\r\n     */\r\n    get rect_mode() {\r\n      return this.#rect_mode;\r\n    }\r\n    set rect_mode(mode) {\r\n      this.pInst.rectMode(mode);\r\n      this.#rect_mode = this.pInst._renderer._rectMode;\r\n    }\r\n  };\r\n\r\nexport const add3DShapeStyling = (baseClass) =>\r\n  class extends baseClass {\r\n    #smooth = false;\r\n    /**\r\n     * smooth=\"true\" draws all geometry with smooth (anti-aliased) edges. smooth=\"true\" will also\r\n     * improve image quality of resized images. On a 3D canvas, smooth is false\r\n     * by default, so it is necessary to set smooth=\"true\" if you would like\r\n     * smooth (antialiased) edges on your geometry.\r\n     * @type {boolean}\r\n     */\r\n    get smooth() {\r\n      return this.#smooth;\r\n    }\r\n    set smooth(val) {\r\n      if (typeof val !== \"boolean\")\r\n        return console.error(\r\n          `${this.tagName}'s smooth property is being set to ${val}, but it may only be set to true or false.`\r\n        );\r\n      if (val) this.pInst.smooth();\r\n      else this.pInst.noSmooth();\r\n      this.#smooth = val;\r\n    }\r\n  };\r\n","import { RenderedElement } from \"../core\";\r\nimport { addXYZ, addWidthHeight } from \"../properties/shape_props\";\r\nimport { WebGLGeometry } from \"../properties/3d_props\";\r\n\r\nclass Normal extends addXYZ(RenderedElement) {\r\n  constructor() {\r\n    super([\"vector\", \"x, y, z\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-normal\", Normal);\r\n\r\nclass Plane extends addWidthHeight(WebGLGeometry) {\r\n  constructor() {\r\n    super(\"[width], [height], [detail_x], [detail_y]\");\r\n  }\r\n}\r\ncustomElements.define(\"p-plane\", Plane);\r\n\r\nclass Box extends addWidthHeight(WebGLGeometry) {\r\n  constructor() {\r\n    super([\"[width], [height], [depth], [detail_x], [detail_y]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-box\", Box);\r\n\r\nclass Sphere extends WebGLGeometry {\r\n  constructor() {\r\n    super([\"[radius], [detail_x], [detail_y]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-sphere\", Sphere);\r\n\r\nclass Cylinder extends WebGLGeometry {\r\n  constructor() {\r\n    super([\r\n      \"[radius], [height], [detail_x], [detail_y], [bottomCap], [topCap]\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-cylinder\", Cylinder);\r\n\r\nclass Cone extends WebGLGeometry {\r\n  constructor() {\r\n    super([\"[radius], [height], [detail_x], [detail_y], [cap]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-cone\", Cone);\r\n\r\nclass Ellipsoid extends WebGLGeometry {\r\n  constructor() {\r\n    super([\"[radius_x], [radius_y], [radius_z], [detail_x], [detail_y]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-ellipsoid\", Ellipsoid);\r\n\r\nclass Torus extends WebGLGeometry {\r\n  constructor() {\r\n    super([\"[radius], [tubeRadius], [detailX], [detailY]\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-torus\", Torus);\r\n\r\n//  TODO - test when preload implemented\r\nclass LoadModel extends RenderedElement {\r\n  constructor() {\r\n    super([\r\n      \"path, normalize, [successCallback], [failureCallback], [fileType]\",\r\n      \"path, [successCallback], [failureCallback], [fileType]\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-load-model\", LoadModel);\r\n\r\nclass Model extends WebGLGeometry {\r\n  constructor() {\r\n    super([\"model\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-model\", Model);\r\n","import {\r\n  WebGLLight,\r\n  addLightFalloff,\r\n  addSpecularColor,\r\n} from \"../properties/3d_props\";\r\n\r\n/**\r\n * Creates an ambient light with the given color.\r\n *\r\n * Ambient light does not come from a specific direction.\r\n * Objects are evenly lit from all sides. Ambient lights are\r\n * almost always used in combination with other types of lights.\r\n * @element ambient-light\r\n * @attribute {Number}   v1     red or hue value relative to the current color\r\n *                                range\r\n * @attribute {Number}   v2     green or saturation value relative to the\r\n *                                current color range\r\n * @attribute {Number}   v3     blue or brightness value relative to the current\r\n *                                color range\r\n * @attribute {Number}   alpha  alpha value relative to current color range\r\n *                                (default is 0-255)\r\n * @attribute {Number}   gray   number specifying value between\r\n *                                white and black\r\n * @attribute {String}   value  a color string\r\n * @attribute {Number[]} values an array containing the red,green,blue &\r\n *                                 and alpha components of the color\r\n * @attribute {p5.Color} color  color as a <a\r\n *                                 href=\"https://p5js.org/reference/#/p5.Color\"\r\n *                                 target=\"_blank\">p5.Color</a>\r\n */\r\nclass AmbientLight extends WebGLLight {\r\n  constructor() {\r\n    super([\"v1, v2, v3, [alpha]\", \"gray, [alpha]\", \"value\", \"values\", \"color\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-ambient-light\", AmbientLight);\r\n\r\n/**\r\n * Creates a directional light with the given color and direction.\r\n *\r\n * Directional light comes from one direction.\r\n * The direction is specified as numbers inclusively between -1 and 1.\r\n * For example, setting the direction as (0, -1, 0) will cause the\r\n * geometry to be lit from below (since the light will be facing\r\n * directly upwards). Similarly, setting the direction as (1, 0, 0)\r\n * will cause the geometry to be lit from the left (since the light\r\n * will be facing directly rightwards).\r\n *\r\n * Directional lights do not have a specific point of origin, and\r\n * therefore cannot be positioned closer or farther away from a geometry.\r\n *\r\n * A maximum of **5** directional lights can be active at once.\r\n * @element    directional-light\r\n * @attribute  {Number}   v1     red or hue value relative to the current color\r\n *                                range\r\n * @attribute  {Number}   v2     green or saturation value relative to the\r\n *                                current color range\r\n * @attribute  {Number}   v3     blue or brightness value relative to the\r\n *                                current color range\r\n * @attribute  {Number}   x      x component of direction (inclusive range of\r\n *                                -1 to 1)\r\n * @attribute  {Number}   y      y component of direction (inclusive range of\r\n *                                -1 to 1)\r\n * @attribute  {Number}   z      z component of direction (inclusive range of\r\n *                                -1 to 1)\r\n * @attribute  {p5.Vector} direction  direction of light as a <a\r\n *                             href=\"https://p5js.org/reference/#/p5.Vector\"\r\n *                             >p5.Vector</a>\r\n * @attribute {p5.Color} color  color as a <a\r\n *                                 href=\"https://p5js.org/reference/#/p5.Color\"\r\n *                                 target=\"_blank\">p5.Color</a>\r\n */\r\nclass DirectionalLight extends addSpecularColor(WebGLLight) {\r\n  constructor() {\r\n    super([\r\n      \"v1, v2, v3, x, y, z\",\r\n      \"v1, v2, v3, direction\",\r\n      \"color, x, y, z\",\r\n      \"color, direction\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-directional-light\", DirectionalLight);\r\n\r\n/**\r\n * Creates a point light with the given color and position.\r\n *\r\n * A point light emits light from a single point in all directions.\r\n * Because the light is emitted from a specific point (position),\r\n * it has a different effect when it is positioned farther vs. nearer\r\n * an object.\r\n *\r\n * A maximum of **5** point lights can be active at once.\r\n *\r\n * @attribute  {Number}   v1   red or hue value relative to the current color\r\n *                                range\r\n * @attribute  {Number}   v2   green or saturation value relative to the\r\n *                                current color range\r\n * @attribute  {Number}   v3   blue or brightness value relative to the\r\n *                                current color range\r\n * @attribute  {Number}    x   x component of position\r\n * @attribute  {Number}    y   y component of position\r\n * @attribute  {Number}    z   z component of position\r\n * @attribute  {p5.Vector}  position position of light as a <a\r\n *                            href=\"https://p5js.org/reference/#/p5.Vector\"\r\n *                            >p5.Vector</a>\r\n * @attribute  {p5.Color|Number[]|String} color  color as a <a\r\n *                href=\"https://p5js.org/reference/#/p5.Color\">p5.Color</a>,\r\n *                as an array, or as a CSS string\r\n */\r\nclass PointLight extends addLightFalloff(addSpecularColor(WebGLLight)) {\r\n  constructor() {\r\n    super([\r\n      \"v1, v2, v3, x, y, z\",\r\n      \"v1, v2, v3, position\",\r\n      \"color, x, y, z\",\r\n      \"color, position\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-point-light\", PointLight);\r\n\r\n/**\r\n * Places an ambient and directional light in the scene.\r\n * The lights are set to <ambient-light v1=\"128\" v2=\"128\" v3=\"128\"> and\r\n * <directional-light v1=\"128\" v2=\"128\" v3'=\"128\" x=\"0\" y=\"0\" z=\"-1\">.\r\n * @element lights\r\n */\r\nclass Lights extends addSpecularColor(WebGLLight) {\r\n  constructor() {\r\n    super([\"\"]);\r\n  }\r\n}\r\ncustomElements.define(\"p-lights\", Lights);\r\n\r\n/**\r\n * Creates a spot light with the given color, position,\r\n * light direction, angle, and concentration.\r\n *\r\n * Like a ```<point-light>```, a ```<spot-light>```\r\n * emits light from a specific point (position). It has a different effect\r\n * when it is positioned farther vs. nearer an object.\r\n *\r\n * However, unlike a ```<point-light>```, the light is emitted in **one\r\n * direction**\r\n * along a conical shape. The shape of the cone can be controlled using\r\n * the `angle` and `concentration` parameters.\r\n *\r\n * The `angle` parameter is used to\r\n * determine the radius of the cone. And the `concentration`\r\n * parameter is used to focus the light towards the center of\r\n * the cone. Both parameters are optional, however if you want\r\n * to specify `concentration`, you must also specify `angle`.\r\n * The minimum concentration value is 1.\r\n *\r\n * A maximum of **5** spot lights can be active at once.\r\n *\r\n * @element spot-light\r\n * @attribute  {Number}    v1             red or hue value relative to the\r\n *                                            current color range\r\n * @attribute  {Number}    v2             green or saturation value relative\r\n *                                            to the current color range\r\n * @attribute  {Number}    v3             blue or brightness value relative\r\n *                                            to the current color range\r\n * @attribute  {Number}    x              x component of position\r\n * @attribute  {Number}    y              y component of position\r\n * @attribute  {Number}    z              z component of position\r\n * @attribute  {Number}    rx             x component of light direction\r\n *                                            (inclusive range of -1 to 1)\r\n * @attribute  {Number}    ry             y component of light direction\r\n *                                            (inclusive range of -1 to 1)\r\n * @attribute  {Number}    rz             z component of light direction\r\n *                                            (inclusive range of -1 to 1)\r\n * @attribute  {Number}    angle          angle of cone. Defaults to PI/3\r\n * @attribute  {Number}    concentration  concentration of cone. Defaults to\r\n *                                            100\r\n */\r\nclass SpotLight extends addLightFalloff(addSpecularColor(WebGLLight)) {\r\n  constructor() {\r\n    super([\r\n      \"v1, v2, v3, x, y, z, rx, ry, rz, [angle], [concentration]\",\r\n      \"color, position, direction, [angle], [concentration]\",\r\n      \"v1, v2, v3, position, direction, [angle], [concentration]\",\r\n      \"color, x, y, z, direction, [angle], [concentration]\",\r\n      \"color, position, rx, ry, rz, [angle], [concentration]\",\r\n      \"v1, v2, v3, x, y, z, direction, [angle], [concentration]\",\r\n      \"v1, v2, v3, position, rx, ry, rz, [angle], [concentration]\",\r\n      \"color, x, y, z, rx, ry, rz, [angle], [concentration]\",\r\n    ]);\r\n  }\r\n}\r\ncustomElements.define(\"p-spot-light\", SpotLight);\r\n","\"use strict\";\nimport \"./core\";\nimport \"./elements/canvas_elements\";\nimport \"./modules/collide\";\nimport \"./elements/2d_shape_elements\";\nimport \"./modules/environment\";\nimport \"./elements/color_elements\";\nimport \"./elements/beyond_canvas_elements\";\nimport \"./modules/shape\";\nimport \"./modules/structure\";\nimport \"./modules/dom\";\nimport \"./modules/data\";\nimport \"./modules/math\";\nimport \"./modules/rendering\";\nimport \"./modules/transform\";\nimport \"./modules/events\";\nimport \"./modules/image\";\nimport \"./modules/io\";\nimport \"./modules/typography\";\nimport \"./elements/3d_shape_elements\";\nimport \"./elements/3d_light_elements\";\n\nconst customElementsDefined = new Event(\"customElementsDefined\");\ndispatchEvent(customElementsDefined);\n"],"names":["$89448357db377a89$var$upperCaseChar","$89448357db377a89$var$upperCaseCharAfterFirst","$89448357db377a89$var$prependMatch","char","$89448357db377a89$export$e12f55f9c91df96a","camelStr","replace","toLowerCase","$89448357db377a89$export$1e3da36a069282b8","pascalStr","slice","$155b2070d5165cbf$var$varName","RegExp","$155b2070d5165cbf$var$notExistingObjProp","$155b2070d5165cbf$export$25a3dda2d7b8a35b","static","str","quoteExps","i","matches","match","length","strMinusStrings","items","split","isObject","LESS_THAN","GREATER_THAN","AT_LEAST","NO_MORE_THAN","AND","OR","WHILE","name","p5","prototype","hasOwnProperty","el","prop","keywords","includes","escapes","globalThis","pInst","ownerName","getOwnerName","getPrefix","regex","varName","replacePropName","$44dcb04f21663935$export$b61bda4fbca264f2","obj","p","Object","defineProperties","$44dcb04f21663935$export$e00416b3cd122575","methodName","wrapper","$44dcb04f21663935$export$49218a2feaa1d459","propNames","forEach","propName","$44dcb04f21663935$export$44f806bc073ff27e","methodNames","get","this","_renderer","set","val","Array","isArray","$24d08737f90f200a$export$f5ddaad6515de8cc","baseClass","$022e415a751e8338$export$699475ba1140c5eb","NONE","$022e415a751e8338$export$b2e29383819ac3c4","stroke","stroke_weight","noStroke","color","isP3D","curStrokeColor","drawingContext","strokeStyle","strokeWeight","curStrokeWeight","lineWidth","$022e415a751e8338$export$306219eb761ac4c2","fill","noFill","curFillColor","fillStyle","$b95df7bebb66e675$export$df7182d31779a5d2","lerp_color","lerpColor","arguments","$53b86be160e08b80$export$a9e2f2714159e1ff","base","options","value","descriptor","getOwnPropertyDescriptor","globalObject","window","writable","call","defineProperty","assignCanvas","c","r","noCanvas","mainDiv","document","querySelector","index","id","children","remove","WEBGL","_setProperty","RendererGL","Renderer2D","_applyDefaults","assets","loadAssets","async","assetElements","from","querySelectorAll","promises","map","load","Promise","all","result","getAttribute","_decrementPreload","registerPreloadMethod","_debug_attributes","create_canvas_element","elementName","createdElement","createElement","canvas","appendChild","setup","object_assign","target","sources","assign","debug_attributes","valType","console","error","$8906e57642561d24$var$attributePriorities","$8906e57642561d24$export$a11dc51f2ecd743e","frame_created","proxy","Proxy","state","has","updateFunctions","Map","constructor","super","above_sibling","previousElementSibling","this_element","above_siblings_off","parentElement","firstElementChild","on","applyChange","change","updateAttribute","changed","assignProp","changeVal","setAttribute","attributeInherited","attributeName","props","hasAttribute","blend_mode","curBlendMode","globalCompositeOperation","blendMode","callAttributeUpdater","inherited","attrName","thisArg","colliding_with","collide_elements","color_mode","_colorMode","colorMode","comments","html","line","flat","console_log","log","draw","push","updateState","repeat","render","child","key","conditions","every","pop","updaters","entries","updater","endRender","drawing_context","replaceAll","erase","_isErasing","noErase","tagName","first_frame","frame_count","frameCount","outerHTML","innerHTML","orderedAttributeNames","ordered","attributes","sort","a","b","indexOf","transformDoneIndex","findLastIndex","parent_element","setDefaults","setupEvalFns","setupRenderFunction","setupEvalFn","attr","attrJsStr","allQuotesMatched","owner","replacePropNames","attrValueVarsReplaced","varValue","enclose","fnHeader","fnBody","fnStr","join","evalFn1","Function","removeAttribute","transform_matrix","inherited1","attrName1","thisArg1","HTMLCanvasElement","v","Color","toString","valToString","updateFunction","webgl_attributes","_glAttributes","setAttributes","$8906e57642561d24$export$82fefa1d40d42487","HTMLElement","$8906e57642561d24$export$66cca51e2e9c1a33","overloads","renderFunctionName","s","toUpperCase","getArgumentsFromOverloads","isOptional","param","overloadMatch","overloadsSplitSorted","o","trim","overloadParams","filterParams","filteredParams","optional","concat","args","customElements","define","$9b5f65468e15ca6f$export$bf2e82bce1545c45","background","Image","cursor","style","noCursor","description","cnvId","descContainer","dummyDOM","describe","height","isNaN","resize","width","filter","loop","noLoop","$fc5fb412c5036f0e$export$5eb092502585022b","defaults","runCode","x","x1","x2","x3","x4","cx","y","y1","y2","y3","y4","cy","z","w","h","d","size","start_angle","stop_angle","PI","vector","createVector","v1","v2","v3","rx","ry","rz","img","createImage","content","preload","renderer","$6c0b298c3cfb5d66$var$Canvas","addEventListener","bind","extends","$6c0b298c3cfb5d66$var$WebGLCanvas","bezier_detail","orbit_control","bezierDetail","_bezierDetail","camera","_curCamera","Camera","setCamera","curve_detail","curveDetail","_curveDetail","_collide_debug","collide_debug","debugMode","_collideDebug","collider_type","point","circle","ellipse","rect","arc","triangle","poly","elementA","elementB","collider","colliderA","colliderB","argsA","collision_args","argsB","fnNameForward","fnNameBackward","warn","collide_rect_rect","w2","h2","collide_rect_rect_vector","p1","sz","p2","sz2","collide_rect_circle","rw","rh","diameter","testX","testY","dist","collide_rect_circle_vector","collide_circle_circle","d2","collide_circle_circle_vector","collide_point_circle","collide_point_circle_vector","collide_point_ellipse","dx","dy","xx","yy","eyy","sqrt","abs","collide_point_ellipse_vector","collide_point_rect","pointX","pointY","xW","yW","collide_point_rect_vector","collide_point_line","px","py","buffer","d1","lineLen","undefined","collide_point_line_vector","collide_line_circle","inside1","inside2","distX","distY","len","dot","pow","closestX","closestY","collide_line_circle_vector","collide_line_line","calcIntersection","uA","uB","intersectionX","intersectionY","collide_line_line_vector","p3","p4","collide_line_rect","left","right","top","bottom","intersection","collide_line_rect_vector","rsz","collide_point_poly","vertices","collision","next","current","vc","vn","collide_point_poly_vector","collide_circle_poly","interior","collide_circle_poly_vector","collide_rect_poly","collide_rect_poly_vector","collide_line_poly","collide_line_poly_vector","vertice","collide_poly_poly","collide_poly_poly_vector","collide_point_triangle","areaOrig","collide_point_triangle_vector","collide_point_point","collide_point_point_vector","collide_point_arc","ax","ay","arcRadius","arcHeading","arcAngle","arcPos","radius","rotate","pointToArc","copy","sub","angle","angleBetween","collide_point_arc_vector","$b2c70728a33f900e$export$767c784c12981b7a","Number","$b2c70728a33f900e$export$d38590504f301641","$b2c70728a33f900e$export$e9cb68263e7b8eb3","z1","z2","$b2c70728a33f900e$export$b29aca5fbcfded71","$b2c70728a33f900e$var$addZ12","rect_mode","$3205d1d25ffdfed4$var$add2DStroke","$b2c70728a33f900e$export$1caa28391933d750","$3205d1d25ffdfed4$var$add2DFillStroke","$3205d1d25ffdfed4$var$transformVertexFn","originalPoint","DOMPoint","_transform_point_matrix","$3205d1d25ffdfed4$var$addArcProps","mode","detail","mouse_over","mouse_trans_pos_x","mouse_trans_pos_y","assert","arcRotation","$3205d1d25ffdfed4$var$Arc","$b2c70728a33f900e$export$5f4909ba2c08017a","$3205d1d25ffdfed4$var$Ellipse","pixel_density","$3205d1d25ffdfed4$var$Circle","$3205d1d25ffdfed4$var$Line","originalStart","originalEnd","$3205d1d25ffdfed4$var$Point","$b2c70728a33f900e$export$339b9be62e060004","$3205d1d25ffdfed4$var$Quad","$b2c70728a33f900e$export$44181740b85b4ab7","$b2c70728a33f900e$export$7757a7d90505b04a","$3205d1d25ffdfed4$var$Rect","$3205d1d25ffdfed4$var$Square","$3205d1d25ffdfed4$var$Triangle","$b2c70728a33f900e$export$9772409c44dd5b8c","window_resized","e","registerMethod","_fullscreen","fullscreen","_width","_height","_createDescriptionContainer","descriptionContainer","append","type","text","describeId","descriptions","fallback","display","getElementById","parentNode","text_output","grid_output","_updateAccsOutput","frame_rate","_frameRate","frameRate","window_width","windowWidth","window_height","windowHeight","_accessibleOutputs","grid","gridOutput","pixelDensity","describeElement","display_density","displayDensity","url","getURL","url_path","getURLPath","url_params","getURLParams","print","textOutput","$60a5ac0d41fb58c8$var$Sketch","HTMLLinkElement","loadXML","href","xmlEl","xmlTag","createElementArguments","xmlTagToCreateElementArguments","pEl","copyAttributes","xmlEl1","parent","body","pEl1","convertElement","convertAllElements","xml","response","documentElement","orig","attrs","i1","path","request","XMLHttpRequest","open","responseType","overrideMimeType","convertXML","send","xmlTag1","is","$7cf852e04aff7b0a$var$pointTangentOverload","fn","bezierPoint","bezierTangent","curvePoint","curveTangent","animate","isLooping","remove_canvas","storage","clearStorage","removeItem","getItem","storeItem","angle_mode","_angleMode","noise_detail","noiseDetail","noise_seed","noiseSeed","random_seed","_lcg_random_state","randomSeed","$0f480329c79e55b1$var$defaultAnchor","$0f480329c79e55b1$var$defaultAngle","$0f480329c79e55b1$var$defaultShear","$0f480329c79e55b1$var$defaultScale","Renderer","wrappedRenderer","apply","_anchorStack","_angleStack","_scaleStack","_shearStack","create","$0f480329c79e55b1$var$wrap","RESET","anchor","translate","angle_x","rotateX","angle_y","rotateY","angle_z","rotateZ","angle_vector","scale_factor","scale","shear","shearX","shearY","uMVMatrix","getTransform","resetMatrix","applyMatrix","$0f480329c79e55b1$var$identityMatrix","DOMMatrix","transMatrix","pixelDensityMatrix","multiply","transformPoint","untransform_point","transform_point","inverse","device_moved","device_turned","mouse_down","mouse_up","mouse_dragging","mouse_double_clicked","_mouseWheel","key_down","key_up","touch_started","touch_moved","touch_ended","_startAngleZ","mouseIsPressed","_mouseWheelDeltaY","mouse_held","_moveThreshold","_shakeThreshold","device_acceleration","accelerationX","accelerationY","accelerationZ","device_prev_acceleration","pAccelerationX","pAccelerationY","pAccelerationZ","device_rotation","rotationX","rotationY","rotationZ","device_prev_rotation","pRotationX","pRotationY","pRotationZ","key_code","keyCode","mouse_button","mouseButton","mouse_pos","mouseX","mouseY","mouse_pos_x","mouse_pos_y","mouse_prev_pos","pmouseX","pmouseY","mouse_prev_pos_x","mouse_prev_pos_y","mouse_trans_pos","mouse_wheel","mouse_window_pos","winMouseX","winMouseY","mouse_window_pos_x","mouse_window_pos_y","mouse_prev_window_pos","pwinMouseX","pwinMouseY","mouse_window_prev_pos_x","mouse_window_prev_pos_y","move_threshold","setMoveThreshold","moved","movedX","movedY","moved_x","moved_y","pointer_lock_request","pointerLockElement","_curElement","elt","requestPointerLock","exitPointerLock","shake_threshold","setShakeThreshold","$03c8a7e932339dbb$var$Image","tint","_tint","noTint","canvas_pixels","loadPixels","pixels","updatePixels","http_post","httpPost","http_do","httpDo","save_file","save","save_json_file","saveJSON","save_strings_file","saveStrings","save_table_file","saveTable","$c76c25f85af461d5$var$Text","DEFAULT","AMBIENT","SPECULAR","EMISSIVE","$852ce654068efccb$export$547e390f3d648e59","ambient_material","emissive_material","shininess","specular_material","no_lights","ambientMaterial","emissiveMaterial","normal_material","useNormalMaterial","normalMaterial","shader","userStrokeShader","userFillShader","resetShader","specularMaterial","_tex","texture","$eb996006dee34211$var$Normal","$eb996006dee34211$var$Plane","$eb996006dee34211$var$Box","$852ce654068efccb$export$c1b6c06f00a3c53a","$35da740d59af89ba$var$customElementsDefined","Event","dispatchEvent"],"version":3,"file":"p5.marker.min.js.map"}